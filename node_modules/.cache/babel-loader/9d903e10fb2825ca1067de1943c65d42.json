{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport { Keyframes } from '@ant-design/cssinjs';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nvar skeletonClsLoading = new Keyframes(\"ant-skeleton-loading\", {\n  '0%': {\n    backgroundPosition: '100% 50%'\n  },\n  '100%': {\n    backgroundPosition: '0 50%'\n  }\n});\n\nvar genSkeletonElementCommonSize = function genSkeletonElementCommonSize(size) {\n  return {\n    height: size,\n    lineHeight: \"\".concat(size, \"px\")\n  };\n};\n\nvar genSkeletonElementAvatarSize = function genSkeletonElementAvatarSize(size) {\n  return Object.assign({\n    width: size\n  }, genSkeletonElementCommonSize(size));\n};\n\nvar genSkeletonColor = function genSkeletonColor(token) {\n  return {\n    background: token.skeletonLoadingBackground,\n    backgroundSize: '400% 100%',\n    animationName: skeletonClsLoading,\n    animationDuration: token.skeletonLoadingMotionDuration,\n    animationTimingFunction: 'ease',\n    animationIterationCount: 'infinite'\n  };\n};\n\nvar genSkeletonElementInputSize = function genSkeletonElementInputSize(size) {\n  return Object.assign({\n    width: size * 5,\n    minWidth: size * 5\n  }, genSkeletonElementCommonSize(size));\n};\n\nvar genSkeletonElementAvatar = function genSkeletonElementAvatar(token) {\n  var _ref;\n\n  var skeletonAvatarCls = token.skeletonAvatarCls,\n      gradientFromColor = token.gradientFromColor,\n      controlHeight = token.controlHeight,\n      controlHeightLG = token.controlHeightLG,\n      controlHeightSM = token.controlHeightSM;\n  return _ref = {}, _defineProperty(_ref, \"\".concat(skeletonAvatarCls), Object.assign({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: gradientFromColor\n  }, genSkeletonElementAvatarSize(controlHeight))), _defineProperty(_ref, \"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-circle\"), {\n    borderRadius: '50%'\n  }), _defineProperty(_ref, \"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-lg\"), Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG))), _defineProperty(_ref, \"\".concat(skeletonAvatarCls).concat(skeletonAvatarCls, \"-sm\"), Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))), _ref;\n};\n\nvar genSkeletonElementInput = function genSkeletonElementInput(token) {\n  var _ref2;\n\n  var controlHeight = token.controlHeight,\n      borderRadiusSM = token.borderRadiusSM,\n      skeletonInputCls = token.skeletonInputCls,\n      controlHeightLG = token.controlHeightLG,\n      controlHeightSM = token.controlHeightSM,\n      gradientFromColor = token.gradientFromColor;\n  return _ref2 = {}, _defineProperty(_ref2, \"\".concat(skeletonInputCls), Object.assign({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: gradientFromColor,\n    borderRadius: borderRadiusSM\n  }, genSkeletonElementInputSize(controlHeight))), _defineProperty(_ref2, \"\".concat(skeletonInputCls, \"-lg\"), Object.assign({}, genSkeletonElementInputSize(controlHeightLG))), _defineProperty(_ref2, \"\".concat(skeletonInputCls, \"-sm\"), Object.assign({}, genSkeletonElementInputSize(controlHeightSM))), _ref2;\n};\n\nvar genSkeletonElementImageSize = function genSkeletonElementImageSize(size) {\n  return Object.assign({\n    width: size\n  }, genSkeletonElementCommonSize(size));\n};\n\nvar genSkeletonElementImage = function genSkeletonElementImage(token) {\n  var _Object$assign, _ref3;\n\n  var skeletonImageCls = token.skeletonImageCls,\n      imageSizeBase = token.imageSizeBase,\n      gradientFromColor = token.gradientFromColor,\n      borderRadiusSM = token.borderRadiusSM;\n  return _ref3 = {}, _defineProperty(_ref3, \"\".concat(skeletonImageCls), Object.assign(Object.assign({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    verticalAlign: 'top',\n    background: gradientFromColor,\n    borderRadius: borderRadiusSM\n  }, genSkeletonElementImageSize(imageSizeBase * 2)), (_Object$assign = {}, _defineProperty(_Object$assign, \"\".concat(skeletonImageCls, \"-path\"), {\n    fill: '#bfbfbf'\n  }), _defineProperty(_Object$assign, \"\".concat(skeletonImageCls, \"-svg\"), Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n    maxWidth: imageSizeBase * 4,\n    maxHeight: imageSizeBase * 4\n  })), _defineProperty(_Object$assign, \"\".concat(skeletonImageCls, \"-svg\").concat(skeletonImageCls, \"-svg-circle\"), {\n    borderRadius: '50%'\n  }), _Object$assign))), _defineProperty(_ref3, \"\".concat(skeletonImageCls).concat(skeletonImageCls, \"-circle\"), {\n    borderRadius: '50%'\n  }), _ref3;\n};\n\nvar genSkeletonElementButtonShape = function genSkeletonElementButtonShape(token, size, buttonCls) {\n  var _ref4;\n\n  var skeletonButtonCls = token.skeletonButtonCls;\n  return _ref4 = {}, _defineProperty(_ref4, \"\".concat(buttonCls).concat(skeletonButtonCls, \"-circle\"), {\n    width: size,\n    minWidth: size,\n    borderRadius: '50%'\n  }), _defineProperty(_ref4, \"\".concat(buttonCls).concat(skeletonButtonCls, \"-round\"), {\n    borderRadius: size\n  }), _ref4;\n};\n\nvar genSkeletonElementButtonSize = function genSkeletonElementButtonSize(size) {\n  return Object.assign({\n    width: size * 2,\n    minWidth: size * 2\n  }, genSkeletonElementCommonSize(size));\n};\n\nvar genSkeletonElementButton = function genSkeletonElementButton(token) {\n  var borderRadiusSM = token.borderRadiusSM,\n      skeletonButtonCls = token.skeletonButtonCls,\n      controlHeight = token.controlHeight,\n      controlHeightLG = token.controlHeightLG,\n      controlHeightSM = token.controlHeightSM,\n      gradientFromColor = token.gradientFromColor;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(_defineProperty({}, \"\".concat(skeletonButtonCls), Object.assign({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: gradientFromColor,\n    borderRadius: borderRadiusSM,\n    width: controlHeight * 2,\n    minWidth: controlHeight * 2\n  }, genSkeletonElementButtonSize(controlHeight))), genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), _defineProperty({}, \"\".concat(skeletonButtonCls, \"-lg\"), Object.assign({}, genSkeletonElementButtonSize(controlHeightLG)))), genSkeletonElementButtonShape(token, controlHeightLG, \"\".concat(skeletonButtonCls, \"-lg\"))), _defineProperty({}, \"\".concat(skeletonButtonCls, \"-sm\"), Object.assign({}, genSkeletonElementButtonSize(controlHeightSM)))), genSkeletonElementButtonShape(token, controlHeightSM, \"\".concat(skeletonButtonCls, \"-sm\")));\n}; // =============================== Base ===============================\n\n\nvar genBaseStyle = function genBaseStyle(token) {\n  var _$concat, _$concat3, _$concat4, _$concat$concat2, _ref5;\n\n  var componentCls = token.componentCls,\n      skeletonAvatarCls = token.skeletonAvatarCls,\n      skeletonTitleCls = token.skeletonTitleCls,\n      skeletonParagraphCls = token.skeletonParagraphCls,\n      skeletonButtonCls = token.skeletonButtonCls,\n      skeletonInputCls = token.skeletonInputCls,\n      skeletonImageCls = token.skeletonImageCls,\n      controlHeight = token.controlHeight,\n      controlHeightLG = token.controlHeightLG,\n      controlHeightSM = token.controlHeightSM,\n      gradientFromColor = token.gradientFromColor,\n      padding = token.padding,\n      marginSM = token.marginSM,\n      borderRadius = token.borderRadius,\n      titleHeight = token.titleHeight,\n      blockRadius = token.blockRadius,\n      paragraphLiHeight = token.paragraphLiHeight,\n      controlHeightXS = token.controlHeightXS,\n      paragraphMarginTop = token.paragraphMarginTop;\n  return _ref5 = {}, _defineProperty(_ref5, \"\".concat(componentCls), (_$concat4 = {\n    display: 'table',\n    width: '100%'\n  }, _defineProperty(_$concat4, \"\".concat(componentCls, \"-header\"), (_$concat = {\n    display: 'table-cell',\n    paddingInlineEnd: padding,\n    verticalAlign: 'top'\n  }, _defineProperty(_$concat, \"\".concat(skeletonAvatarCls), Object.assign({\n    display: 'inline-block',\n    verticalAlign: 'top',\n    background: gradientFromColor\n  }, genSkeletonElementAvatarSize(controlHeight))), _defineProperty(_$concat, \"\".concat(skeletonAvatarCls, \"-circle\"), {\n    borderRadius: '50%'\n  }), _defineProperty(_$concat, \"\".concat(skeletonAvatarCls, \"-lg\"), Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG))), _defineProperty(_$concat, \"\".concat(skeletonAvatarCls, \"-sm\"), Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))), _$concat)), _defineProperty(_$concat4, \"\".concat(componentCls, \"-content\"), (_$concat3 = {\n    display: 'table-cell',\n    width: '100%',\n    verticalAlign: 'top'\n  }, _defineProperty(_$concat3, \"\".concat(skeletonTitleCls), _defineProperty({\n    width: '100%',\n    height: titleHeight,\n    background: gradientFromColor,\n    borderRadius: blockRadius\n  }, \"+ \".concat(skeletonParagraphCls), {\n    marginBlockStart: controlHeightSM\n  })), _defineProperty(_$concat3, \"\".concat(skeletonParagraphCls), {\n    padding: 0,\n    '> li': {\n      width: '100%',\n      height: paragraphLiHeight,\n      listStyle: 'none',\n      background: gradientFromColor,\n      borderRadius: blockRadius,\n      '+ li': {\n        marginBlockStart: controlHeightXS\n      }\n    }\n  }), _defineProperty(_$concat3, \"\".concat(skeletonParagraphCls, \"> li:last-child:not(:first-child):not(:nth-child(2))\"), {\n    width: '61%'\n  }), _$concat3)), _defineProperty(_$concat4, \"&-round \".concat(componentCls, \"-content\"), _defineProperty({}, \"\".concat(skeletonTitleCls, \", \").concat(skeletonParagraphCls, \" > li\"), {\n    borderRadius: borderRadius\n  })), _$concat4)), _defineProperty(_ref5, \"\".concat(componentCls, \"-with-avatar \").concat(componentCls, \"-content\"), _defineProperty({}, \"\".concat(skeletonTitleCls), _defineProperty({\n    marginBlockStart: marginSM\n  }, \"+ \".concat(skeletonParagraphCls), {\n    marginBlockStart: paragraphMarginTop\n  }))), _defineProperty(_ref5, \"\".concat(componentCls).concat(componentCls, \"-element\"), Object.assign(Object.assign(Object.assign(Object.assign({\n    display: 'inline-block',\n    width: 'auto'\n  }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token))), _defineProperty(_ref5, \"\".concat(componentCls).concat(componentCls, \"-block\"), (_$concat$concat2 = {\n    width: '100%'\n  }, _defineProperty(_$concat$concat2, \"\".concat(skeletonButtonCls), {\n    width: '100%'\n  }), _defineProperty(_$concat$concat2, \"\".concat(skeletonInputCls), {\n    width: '100%'\n  }), _$concat$concat2)), _defineProperty(_ref5, \"\".concat(componentCls).concat(componentCls, \"-active\"), _defineProperty({}, \"\\n        \".concat(skeletonTitleCls, \",\\n        \").concat(skeletonParagraphCls, \" > li,\\n        \").concat(skeletonAvatarCls, \",\\n        \").concat(skeletonButtonCls, \",\\n        \").concat(skeletonInputCls, \",\\n        \").concat(skeletonImageCls, \"\\n      \"), Object.assign({}, genSkeletonColor(token)))), _ref5;\n}; // ============================== Export ==============================\n\n\nexport default genComponentStyleHook('Skeleton', function (token) {\n  var componentCls = token.componentCls;\n  var skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: \"\".concat(componentCls, \"-avatar\"),\n    skeletonTitleCls: \"\".concat(componentCls, \"-title\"),\n    skeletonParagraphCls: \"\".concat(componentCls, \"-paragraph\"),\n    skeletonButtonCls: \"\".concat(componentCls, \"-button\"),\n    skeletonInputCls: \"\".concat(componentCls, \"-input\"),\n    skeletonImageCls: \"\".concat(componentCls, \"-image\"),\n    imageSizeBase: token.controlHeight * 1.5,\n    borderRadius: 100,\n    skeletonLoadingBackground: \"linear-gradient(90deg, \".concat(token.gradientFromColor, \" 25%, \").concat(token.gradientToColor, \" 37%, \").concat(token.gradientFromColor, \" 63%)\"),\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, function (token) {\n  var colorFillContent = token.colorFillContent,\n      colorFill = token.colorFill;\n  var gradientFromColor = colorFillContent;\n  var gradientToColor = colorFill;\n  return {\n    color: gradientFromColor,\n    colorGradientEnd: gradientToColor,\n    gradientFromColor: gradientFromColor,\n    gradientToColor: gradientToColor,\n    titleHeight: token.controlHeight / 2,\n    blockRadius: token.borderRadiusSM,\n    paragraphMarginTop: token.marginLG + token.marginXXS,\n    paragraphLiHeight: token.controlHeight / 2\n  };\n}, {\n  deprecatedTokens: [['color', 'gradientFromColor'], ['colorGradientEnd', 'gradientToColor']]\n});","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/skeleton/style/index.js"],"names":["Keyframes","genComponentStyleHook","mergeToken","skeletonClsLoading","backgroundPosition","genSkeletonElementCommonSize","size","height","lineHeight","genSkeletonElementAvatarSize","Object","assign","width","genSkeletonColor","token","background","skeletonLoadingBackground","backgroundSize","animationName","animationDuration","skeletonLoadingMotionDuration","animationTimingFunction","animationIterationCount","genSkeletonElementInputSize","minWidth","genSkeletonElementAvatar","skeletonAvatarCls","gradientFromColor","controlHeight","controlHeightLG","controlHeightSM","display","verticalAlign","borderRadius","genSkeletonElementInput","borderRadiusSM","skeletonInputCls","genSkeletonElementImageSize","genSkeletonElementImage","skeletonImageCls","imageSizeBase","alignItems","justifyContent","fill","maxWidth","maxHeight","genSkeletonElementButtonShape","buttonCls","skeletonButtonCls","genSkeletonElementButtonSize","genSkeletonElementButton","genBaseStyle","componentCls","skeletonTitleCls","skeletonParagraphCls","padding","marginSM","titleHeight","blockRadius","paragraphLiHeight","controlHeightXS","paragraphMarginTop","paddingInlineEnd","marginBlockStart","listStyle","skeletonToken","gradientToColor","colorFillContent","colorFill","color","colorGradientEnd","marginLG","marginXXS","deprecatedTokens"],"mappings":"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","sourcesContent":["import { Keyframes } from '@ant-design/cssinjs';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nconst skeletonClsLoading = new Keyframes(`ant-skeleton-loading`, {\n  '0%': {\n    backgroundPosition: '100% 50%'\n  },\n  '100%': {\n    backgroundPosition: '0 50%'\n  }\n});\nconst genSkeletonElementCommonSize = size => ({\n  height: size,\n  lineHeight: `${size}px`\n});\nconst genSkeletonElementAvatarSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonColor = token => ({\n  background: token.skeletonLoadingBackground,\n  backgroundSize: '400% 100%',\n  animationName: skeletonClsLoading,\n  animationDuration: token.skeletonLoadingMotionDuration,\n  animationTimingFunction: 'ease',\n  animationIterationCount: 'infinite'\n});\nconst genSkeletonElementInputSize = size => Object.assign({\n  width: size * 5,\n  minWidth: size * 5\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementAvatar = token => {\n  const {\n    skeletonAvatarCls,\n    gradientFromColor,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM\n  } = token;\n  return {\n    [`${skeletonAvatarCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor\n    }, genSkeletonElementAvatarSize(controlHeight)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-circle`]: {\n      borderRadius: '50%'\n    },\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementInput = token => {\n  const {\n    controlHeight,\n    borderRadiusSM,\n    skeletonInputCls,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor\n  } = token;\n  return {\n    [`${skeletonInputCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementInputSize(controlHeight)),\n    [`${skeletonInputCls}-lg`]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG)),\n    [`${skeletonInputCls}-sm`]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementImageSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementImage = token => {\n  const {\n    skeletonImageCls,\n    imageSizeBase,\n    gradientFromColor,\n    borderRadiusSM\n  } = token;\n  return {\n    [`${skeletonImageCls}`]: Object.assign(Object.assign({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementImageSize(imageSizeBase * 2)), {\n      [`${skeletonImageCls}-path`]: {\n        fill: '#bfbfbf'\n      },\n      [`${skeletonImageCls}-svg`]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n        maxWidth: imageSizeBase * 4,\n        maxHeight: imageSizeBase * 4\n      }),\n      [`${skeletonImageCls}-svg${skeletonImageCls}-svg-circle`]: {\n        borderRadius: '50%'\n      }\n    }),\n    [`${skeletonImageCls}${skeletonImageCls}-circle`]: {\n      borderRadius: '50%'\n    }\n  };\n};\nconst genSkeletonElementButtonShape = (token, size, buttonCls) => {\n  const {\n    skeletonButtonCls\n  } = token;\n  return {\n    [`${buttonCls}${skeletonButtonCls}-circle`]: {\n      width: size,\n      minWidth: size,\n      borderRadius: '50%'\n    },\n    [`${buttonCls}${skeletonButtonCls}-round`]: {\n      borderRadius: size\n    }\n  };\n};\nconst genSkeletonElementButtonSize = size => Object.assign({\n  width: size * 2,\n  minWidth: size * 2\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementButton = token => {\n  const {\n    borderRadiusSM,\n    skeletonButtonCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor\n  } = token;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    [`${skeletonButtonCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM,\n      width: controlHeight * 2,\n      minWidth: controlHeight * 2\n    }, genSkeletonElementButtonSize(controlHeight))\n  }, genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), {\n    [`${skeletonButtonCls}-lg`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG))\n  }), genSkeletonElementButtonShape(token, controlHeightLG, `${skeletonButtonCls}-lg`)), {\n    [`${skeletonButtonCls}-sm`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM))\n  }), genSkeletonElementButtonShape(token, controlHeightSM, `${skeletonButtonCls}-sm`));\n};\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    skeletonAvatarCls,\n    skeletonTitleCls,\n    skeletonParagraphCls,\n    skeletonButtonCls,\n    skeletonInputCls,\n    skeletonImageCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    padding,\n    marginSM,\n    borderRadius,\n    titleHeight,\n    blockRadius,\n    paragraphLiHeight,\n    controlHeightXS,\n    paragraphMarginTop\n  } = token;\n  return {\n    [`${componentCls}`]: {\n      display: 'table',\n      width: '100%',\n      [`${componentCls}-header`]: {\n        display: 'table-cell',\n        paddingInlineEnd: padding,\n        verticalAlign: 'top',\n        // Avatar\n        [`${skeletonAvatarCls}`]: Object.assign({\n          display: 'inline-block',\n          verticalAlign: 'top',\n          background: gradientFromColor\n        }, genSkeletonElementAvatarSize(controlHeight)),\n        [`${skeletonAvatarCls}-circle`]: {\n          borderRadius: '50%'\n        },\n        [`${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n        [`${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n      },\n      [`${componentCls}-content`]: {\n        display: 'table-cell',\n        width: '100%',\n        verticalAlign: 'top',\n        // Title\n        [`${skeletonTitleCls}`]: {\n          width: '100%',\n          height: titleHeight,\n          background: gradientFromColor,\n          borderRadius: blockRadius,\n          [`+ ${skeletonParagraphCls}`]: {\n            marginBlockStart: controlHeightSM\n          }\n        },\n        // paragraph\n        [`${skeletonParagraphCls}`]: {\n          padding: 0,\n          '> li': {\n            width: '100%',\n            height: paragraphLiHeight,\n            listStyle: 'none',\n            background: gradientFromColor,\n            borderRadius: blockRadius,\n            '+ li': {\n              marginBlockStart: controlHeightXS\n            }\n          }\n        },\n        [`${skeletonParagraphCls}> li:last-child:not(:first-child):not(:nth-child(2))`]: {\n          width: '61%'\n        }\n      },\n      [`&-round ${componentCls}-content`]: {\n        [`${skeletonTitleCls}, ${skeletonParagraphCls} > li`]: {\n          borderRadius\n        }\n      }\n    },\n    [`${componentCls}-with-avatar ${componentCls}-content`]: {\n      // Title\n      [`${skeletonTitleCls}`]: {\n        marginBlockStart: marginSM,\n        [`+ ${skeletonParagraphCls}`]: {\n          marginBlockStart: paragraphMarginTop\n        }\n      }\n    },\n    // Skeleton element\n    [`${componentCls}${componentCls}-element`]: Object.assign(Object.assign(Object.assign(Object.assign({\n      display: 'inline-block',\n      width: 'auto'\n    }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token)),\n    // Skeleton Block Button, Input\n    [`${componentCls}${componentCls}-block`]: {\n      width: '100%',\n      [`${skeletonButtonCls}`]: {\n        width: '100%'\n      },\n      [`${skeletonInputCls}`]: {\n        width: '100%'\n      }\n    },\n    // With active animation\n    [`${componentCls}${componentCls}-active`]: {\n      [`\n        ${skeletonTitleCls},\n        ${skeletonParagraphCls} > li,\n        ${skeletonAvatarCls},\n        ${skeletonButtonCls},\n        ${skeletonInputCls},\n        ${skeletonImageCls}\n      `]: Object.assign({}, genSkeletonColor(token))\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Skeleton', token => {\n  const {\n    componentCls\n  } = token;\n  const skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: `${componentCls}-avatar`,\n    skeletonTitleCls: `${componentCls}-title`,\n    skeletonParagraphCls: `${componentCls}-paragraph`,\n    skeletonButtonCls: `${componentCls}-button`,\n    skeletonInputCls: `${componentCls}-input`,\n    skeletonImageCls: `${componentCls}-image`,\n    imageSizeBase: token.controlHeight * 1.5,\n    borderRadius: 100,\n    skeletonLoadingBackground: `linear-gradient(90deg, ${token.gradientFromColor} 25%, ${token.gradientToColor} 37%, ${token.gradientFromColor} 63%)`,\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, token => {\n  const {\n    colorFillContent,\n    colorFill\n  } = token;\n  const gradientFromColor = colorFillContent;\n  const gradientToColor = colorFill;\n  return {\n    color: gradientFromColor,\n    colorGradientEnd: gradientToColor,\n    gradientFromColor,\n    gradientToColor,\n    titleHeight: token.controlHeight / 2,\n    blockRadius: token.borderRadiusSM,\n    paragraphMarginTop: token.marginLG + token.marginXXS,\n    paragraphLiHeight: token.controlHeight / 2\n  };\n}, {\n  deprecatedTokens: [['color', 'gradientFromColor'], ['colorGradientEnd', 'gradientToColor']]\n});"]},"metadata":{},"sourceType":"module"}