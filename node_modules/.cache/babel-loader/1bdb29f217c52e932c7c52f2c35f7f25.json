{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport genPurePanel from '../_util/PurePanel';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport Select from '../select';\nvar Option = Select.Option;\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nvar AutoComplete = function AutoComplete(props, ref) {\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      popupClassName = props.popupClassName,\n      dropdownClassName = props.dropdownClassName,\n      children = props.children,\n      dataSource = props.dataSource;\n  var childNodes = toArray(children); // ============================= Input =============================\n\n  var customizeInput;\n\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    var _childNodes = _slicedToArray(childNodes, 1);\n\n    customizeInput = _childNodes[0];\n  }\n\n  var getInputElement = customizeInput ? function () {\n    return customizeInput;\n  } : undefined; // ============================ Options ============================\n\n  var optionChildren; // [Legacy] convert `children` or `dataSource` into option children\n\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(function (item) {\n      if (isValidElement(item)) {\n        return item;\n      }\n\n      switch (typeof item) {\n        case 'string':\n          return (\n            /*#__PURE__*/\n            React.createElement(Option, {\n              key: item,\n              value: item\n            }, item)\n          );\n\n        case 'object':\n          {\n            var optionValue = item.value;\n            return (\n              /*#__PURE__*/\n              React.createElement(Option, {\n                key: optionValue,\n                value: optionValue\n              }, item.text)\n            );\n          }\n\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'AutoComplete', '`dropdownClassName` is deprecated, please use `popupClassName` instead.') : void 0;\n  }\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls;\n\n  var prefixCls = getPrefixCls('select', customizePrefixCls);\n  return (\n    /*#__PURE__*/\n    React.createElement(Select, Object.assign({\n      ref: ref,\n      showArrow: false\n    }, omit(props, ['dataSource', 'dropdownClassName']), {\n      prefixCls: prefixCls,\n      popupClassName: popupClassName || dropdownClassName,\n      className: classNames(\"\".concat(prefixCls, \"-auto-complete\"), className),\n      mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n    }, {\n      // Internal api\n      getInputElement: getInputElement\n    }), optionChildren)\n  );\n};\n\nvar RefAutoComplete =\n/*#__PURE__*/\nReact.forwardRef(AutoComplete); // We don't care debug panel\n\n/* istanbul ignore next */\n\nvar PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\n\nif (process.env.NODE_ENV !== 'production') {\n  AutoComplete.displayName = 'AutoComplete';\n}\n\nexport default RefAutoComplete;","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/auto-complete/index.js"],"names":["classNames","toArray","omit","React","genPurePanel","isValidElement","warning","ConfigContext","Select","Option","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","ref","customizePrefixCls","prefixCls","className","popupClassName","dropdownClassName","children","dataSource","childNodes","customizeInput","length","getInputElement","undefined","optionChildren","map","item","createElement","key","value","optionValue","text","process","env","NODE_ENV","useContext","getPrefixCls","Object","assign","showArrow","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","forwardRef","PurePanel","_InternalPanelDoNotUseOrYouWillBeFired","displayName"],"mappings":"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","sourcesContent":["/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport genPurePanel from '../_util/PurePanel';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport Select from '../select';\nconst {\n  Option\n} = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    popupClassName,\n    dropdownClassName,\n    children,\n    dataSource\n  } = props;\n  const childNodes = toArray(children);\n  // ============================= Input =============================\n  let customizeInput;\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    [customizeInput] = childNodes;\n  }\n  const getInputElement = customizeInput ? () => customizeInput : undefined;\n  // ============================ Options ============================\n  let optionChildren;\n  // [Legacy] convert `children` or `dataSource` into option children\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(item => {\n      if (isValidElement(item)) {\n        return item;\n      }\n      switch (typeof item) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n        case 'object':\n          {\n            const {\n              value: optionValue\n            } = item;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'AutoComplete', '`dropdownClassName` is deprecated, please use `popupClassName` instead.') : void 0;\n  }\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('select', customizePrefixCls);\n  return /*#__PURE__*/React.createElement(Select, Object.assign({\n    ref: ref,\n    showArrow: false\n  }, omit(props, ['dataSource', 'dropdownClassName']), {\n    prefixCls: prefixCls,\n    popupClassName: popupClassName || dropdownClassName,\n    className: classNames(`${prefixCls}-auto-complete`, className),\n    mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n  }, {\n    // Internal api\n    getInputElement\n  }), optionChildren);\n};\nconst RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\n// We don't care debug panel\n/* istanbul ignore next */\nconst PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nif (process.env.NODE_ENV !== 'production') {\n  AutoComplete.displayName = 'AutoComplete';\n}\nexport default RefAutoComplete;"]},"metadata":{},"sourceType":"module"}