{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nexport default function usePatchElement() {\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        elements = _React$useState2[0],\n        setElements = _React$useState2[1];\n\n  const patchElement = React.useCallback(element => {\n    // append a new element to elements (and create a new ref)\n    setElements(originElements => [].concat(_toConsumableArray(originElements), [element])); // return a function that removes the new element out of elements (and create a new ref)\n    // it works a little like useEffect\n\n    return () => {\n      setElements(originElements => originElements.filter(ele => ele !== element));\n    };\n  }, []);\n  return [elements, patchElement];\n}","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/_util/hooks/usePatchElement.js"],"names":["_toConsumableArray","React","usePatchElement","useState","elements","setElements","patchElement","useCallback","element","originElements","concat","filter","ele"],"mappings":";AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,eAAe,SAASC,eAAT,GAA2B;AAAA,0BACRD,KAAK,CAACE,QAAN,CAAe,EAAf,CADQ;AAAA;AAAA,QACjCC,QADiC;AAAA,QACvBC,WADuB;;AAExC,QAAMC,YAAY,GAAGL,KAAK,CAACM,WAAN,CAAkBC,OAAO,IAAI;AAChD;AACAH,IAAAA,WAAW,CAACI,cAAc,IAAI,GAAGC,MAAH,CAAUV,kBAAkB,CAACS,cAAD,CAA5B,EAA8C,CAACD,OAAD,CAA9C,CAAnB,CAAX,CAFgD,CAGhD;AACA;;AACA,WAAO,MAAM;AACXH,MAAAA,WAAW,CAACI,cAAc,IAAIA,cAAc,CAACE,MAAf,CAAsBC,GAAG,IAAIA,GAAG,KAAKJ,OAArC,CAAnB,CAAX;AACD,KAFD;AAGD,GARoB,EAQlB,EARkB,CAArB;AASA,SAAO,CAACJ,QAAD,EAAWE,YAAX,CAAP;AACD","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nexport default function usePatchElement() {\n  const [elements, setElements] = React.useState([]);\n  const patchElement = React.useCallback(element => {\n    // append a new element to elements (and create a new ref)\n    setElements(originElements => [].concat(_toConsumableArray(originElements), [element]));\n    // return a function that removes the new element out of elements (and create a new ref)\n    // it works a little like useEffect\n    return () => {\n      setElements(originElements => originElements.filter(ele => ele !== element));\n    };\n  }, []);\n  return [elements, patchElement];\n}"]},"metadata":{},"sourceType":"module"}