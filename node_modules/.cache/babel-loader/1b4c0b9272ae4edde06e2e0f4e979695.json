{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport CaretDownOutlined from \"@ant-design/icons/es/icons/CaretDownOutlined\";\nimport CaretUpOutlined from \"@ant-design/icons/es/icons/CaretUpOutlined\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport * as React from 'react';\nimport Tooltip from '../../tooltip';\nimport { getColumnKey, getColumnPos, renderColumnTitle, safeColumnTitle } from '../util';\nconst ASCEND = 'ascend';\nconst DESCEND = 'descend';\n\nfunction getMultiplePriority(column) {\n  if (typeof column.sorter === 'object' && typeof column.sorter.multiple === 'number') {\n    return column.sorter.multiple;\n  }\n\n  return false;\n}\n\nfunction getSortFunction(sorter) {\n  if (typeof sorter === 'function') {\n    return sorter;\n  }\n\n  if (sorter && typeof sorter === 'object' && sorter.compare) {\n    return sorter.compare;\n  }\n\n  return false;\n}\n\nfunction nextSortDirection(sortDirections, current) {\n  if (!current) {\n    return sortDirections[0];\n  }\n\n  return sortDirections[sortDirections.indexOf(current) + 1];\n}\n\nfunction collectSortStates(columns, init, pos) {\n  let sortStates = [];\n\n  function pushState(column, columnPos) {\n    sortStates.push({\n      column,\n      key: getColumnKey(column, columnPos),\n      multiplePriority: getMultiplePriority(column),\n      sortOrder: column.sortOrder\n    });\n  }\n\n  (columns || []).forEach((column, index) => {\n    const columnPos = getColumnPos(index, pos);\n\n    if (column.children) {\n      if ('sortOrder' in column) {\n        // Controlled\n        pushState(column, columnPos);\n      }\n\n      sortStates = [].concat(_toConsumableArray(sortStates), _toConsumableArray(collectSortStates(column.children, init, columnPos)));\n    } else if (column.sorter) {\n      if ('sortOrder' in column) {\n        // Controlled\n        pushState(column, columnPos);\n      } else if (init && column.defaultSortOrder) {\n        // Default sorter\n        sortStates.push({\n          column,\n          key: getColumnKey(column, columnPos),\n          multiplePriority: getMultiplePriority(column),\n          sortOrder: column.defaultSortOrder\n        });\n      }\n    }\n  });\n  return sortStates;\n}\n\nfunction injectSorter(prefixCls, columns, sorterStates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, pos) {\n  return (columns || []).map((column, index) => {\n    const columnPos = getColumnPos(index, pos);\n    let newColumn = column;\n\n    if (newColumn.sorter) {\n      const sortDirections = newColumn.sortDirections || defaultSortDirections;\n      const showSorterTooltip = newColumn.showSorterTooltip === undefined ? tableShowSorterTooltip : newColumn.showSorterTooltip;\n      const columnKey = getColumnKey(newColumn, columnPos);\n      const sorterState = sorterStates.find(_ref => {\n        let key = _ref.key;\n        return key === columnKey;\n      });\n      const sortOrder = sorterState ? sorterState.sortOrder : null;\n      const nextSortOrder = nextSortDirection(sortDirections, sortOrder);\n      let sorter;\n\n      if (column.sortIcon) {\n        sorter = column.sortIcon({\n          sortOrder\n        });\n      } else {\n        const upNode = sortDirections.includes(ASCEND) &&\n        /*#__PURE__*/\n        React.createElement(CaretUpOutlined, {\n          className: classNames(`${prefixCls}-column-sorter-up`, {\n            active: sortOrder === ASCEND\n          })\n        });\n        const downNode = sortDirections.includes(DESCEND) &&\n        /*#__PURE__*/\n        React.createElement(CaretDownOutlined, {\n          className: classNames(`${prefixCls}-column-sorter-down`, {\n            active: sortOrder === DESCEND\n          })\n        });\n        sorter =\n        /*#__PURE__*/\n        React.createElement(\"span\", {\n          className: classNames(`${prefixCls}-column-sorter`, {\n            [`${prefixCls}-column-sorter-full`]: !!(upNode && downNode)\n          })\n        },\n        /*#__PURE__*/\n        React.createElement(\"span\", {\n          className: `${prefixCls}-column-sorter-inner`,\n          \"aria-hidden\": \"true\"\n        }, upNode, downNode));\n      }\n\n      const _ref7 = tableLocale || {},\n            cancelSort = _ref7.cancelSort,\n            triggerAsc = _ref7.triggerAsc,\n            triggerDesc = _ref7.triggerDesc;\n\n      let sortTip = cancelSort;\n\n      if (nextSortOrder === DESCEND) {\n        sortTip = triggerDesc;\n      } else if (nextSortOrder === ASCEND) {\n        sortTip = triggerAsc;\n      }\n\n      const tooltipProps = typeof showSorterTooltip === 'object' ? showSorterTooltip : {\n        title: sortTip\n      };\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        className: classNames(newColumn.className, {\n          [`${prefixCls}-column-sort`]: sortOrder\n        }),\n        title: renderProps => {\n          const renderSortTitle =\n          /*#__PURE__*/\n          React.createElement(\"div\", {\n            className: `${prefixCls}-column-sorters`\n          },\n          /*#__PURE__*/\n          React.createElement(\"span\", {\n            className: `${prefixCls}-column-title`\n          }, renderColumnTitle(column.title, renderProps)), sorter);\n          return showSorterTooltip ?\n          /*#__PURE__*/\n          React.createElement(Tooltip, Object.assign({}, tooltipProps), renderSortTitle) : renderSortTitle;\n        },\n        onHeaderCell: col => {\n          const cell = column.onHeaderCell && column.onHeaderCell(col) || {};\n          const originOnClick = cell.onClick;\n          const originOKeyDown = cell.onKeyDown;\n\n          cell.onClick = event => {\n            triggerSorter({\n              column,\n              key: columnKey,\n              sortOrder: nextSortOrder,\n              multiplePriority: getMultiplePriority(column)\n            });\n            originOnClick === null || originOnClick === void 0 ? void 0 : originOnClick(event);\n          };\n\n          cell.onKeyDown = event => {\n            if (event.keyCode === KeyCode.ENTER) {\n              triggerSorter({\n                column,\n                key: columnKey,\n                sortOrder: nextSortOrder,\n                multiplePriority: getMultiplePriority(column)\n              });\n              originOKeyDown === null || originOKeyDown === void 0 ? void 0 : originOKeyDown(event);\n            }\n          };\n\n          const renderTitle = safeColumnTitle(column.title, {});\n          const displayTitle = renderTitle === null || renderTitle === void 0 ? void 0 : renderTitle.toString(); // Inform the screen-reader so it can tell the visually impaired user which column is sorted\n\n          if (sortOrder) {\n            cell['aria-sort'] = sortOrder === 'ascend' ? 'ascending' : 'descending';\n          } else {\n            cell['aria-label'] = displayTitle || '';\n          }\n\n          cell.className = classNames(cell.className, `${prefixCls}-column-has-sorters`);\n          cell.tabIndex = 0;\n\n          if (column.ellipsis) {\n            cell.title = (renderTitle !== null && renderTitle !== void 0 ? renderTitle : '').toString();\n          }\n\n          return cell;\n        }\n      });\n    }\n\n    if ('children' in newColumn) {\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        children: injectSorter(prefixCls, newColumn.children, sorterStates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, columnPos)\n      });\n    }\n\n    return newColumn;\n  });\n}\n\nfunction stateToInfo(sorterStates) {\n  const column = sorterStates.column,\n        sortOrder = sorterStates.sortOrder;\n  return {\n    column,\n    order: sortOrder,\n    field: column.dataIndex,\n    columnKey: column.key\n  };\n}\n\nfunction generateSorterInfo(sorterStates) {\n  const list = sorterStates.filter(_ref2 => {\n    let sortOrder = _ref2.sortOrder;\n    return sortOrder;\n  }).map(stateToInfo); // =========== Legacy compatible support ===========\n  // https://github.com/ant-design/ant-design/pull/19226\n\n  if (list.length === 0 && sorterStates.length) {\n    return Object.assign(Object.assign({}, stateToInfo(sorterStates[sorterStates.length - 1])), {\n      column: undefined\n    });\n  }\n\n  if (list.length <= 1) {\n    return list[0] || {};\n  }\n\n  return list;\n}\n\nexport function getSortData(data, sortStates, childrenColumnName) {\n  const innerSorterStates = sortStates.slice().sort((a, b) => b.multiplePriority - a.multiplePriority);\n  const cloneData = data.slice();\n  const runningSorters = innerSorterStates.filter(_ref3 => {\n    let sorter = _ref3.column.sorter,\n        sortOrder = _ref3.sortOrder;\n    return getSortFunction(sorter) && sortOrder;\n  }); // Skip if no sorter needed\n\n  if (!runningSorters.length) {\n    return cloneData;\n  }\n\n  return cloneData.sort((record1, record2) => {\n    for (let i = 0; i < runningSorters.length; i += 1) {\n      const sorterState = runningSorters[i];\n      const sorter = sorterState.column.sorter,\n            sortOrder = sorterState.sortOrder;\n      const compareFn = getSortFunction(sorter);\n\n      if (compareFn && sortOrder) {\n        const compareResult = compareFn(record1, record2, sortOrder);\n\n        if (compareResult !== 0) {\n          return sortOrder === ASCEND ? compareResult : -compareResult;\n        }\n      }\n    }\n\n    return 0;\n  }).map(record => {\n    const subRecords = record[childrenColumnName];\n\n    if (subRecords) {\n      return Object.assign(Object.assign({}, record), {\n        [childrenColumnName]: getSortData(subRecords, sortStates, childrenColumnName)\n      });\n    }\n\n    return record;\n  });\n}\nexport default function useFilterSorter(_ref4) {\n  let prefixCls = _ref4.prefixCls,\n      mergedColumns = _ref4.mergedColumns,\n      onSorterChange = _ref4.onSorterChange,\n      sortDirections = _ref4.sortDirections,\n      tableLocale = _ref4.tableLocale,\n      showSorterTooltip = _ref4.showSorterTooltip;\n\n  const _React$useState = React.useState(collectSortStates(mergedColumns, true)),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        sortStates = _React$useState2[0],\n        setSortStates = _React$useState2[1];\n\n  const mergedSorterStates = React.useMemo(() => {\n    let validate = true;\n    const collectedStates = collectSortStates(mergedColumns, false); // Return if not controlled\n\n    if (!collectedStates.length) {\n      return sortStates;\n    }\n\n    const validateStates = [];\n\n    function patchStates(state) {\n      if (validate) {\n        validateStates.push(state);\n      } else {\n        validateStates.push(Object.assign(Object.assign({}, state), {\n          sortOrder: null\n        }));\n      }\n    }\n\n    let multipleMode = null;\n    collectedStates.forEach(state => {\n      if (multipleMode === null) {\n        patchStates(state);\n\n        if (state.sortOrder) {\n          if (state.multiplePriority === false) {\n            validate = false;\n          } else {\n            multipleMode = true;\n          }\n        }\n      } else if (multipleMode && state.multiplePriority !== false) {\n        patchStates(state);\n      } else {\n        validate = false;\n        patchStates(state);\n      }\n    });\n    return validateStates;\n  }, [mergedColumns, sortStates]); // Get render columns title required props\n\n  const columnTitleSorterProps = React.useMemo(() => {\n    const sortColumns = mergedSorterStates.map(_ref5 => {\n      let column = _ref5.column,\n          sortOrder = _ref5.sortOrder;\n      return {\n        column,\n        order: sortOrder\n      };\n    });\n    return {\n      sortColumns,\n      // Legacy\n      sortColumn: sortColumns[0] && sortColumns[0].column,\n      sortOrder: sortColumns[0] && sortColumns[0].order\n    };\n  }, [mergedSorterStates]);\n\n  function triggerSorter(sortState) {\n    let newSorterStates;\n\n    if (sortState.multiplePriority === false || !mergedSorterStates.length || mergedSorterStates[0].multiplePriority === false) {\n      newSorterStates = [sortState];\n    } else {\n      newSorterStates = [].concat(_toConsumableArray(mergedSorterStates.filter(_ref6 => {\n        let key = _ref6.key;\n        return key !== sortState.key;\n      })), [sortState]);\n    }\n\n    setSortStates(newSorterStates);\n    onSorterChange(generateSorterInfo(newSorterStates), newSorterStates);\n  }\n\n  const transformColumns = innerColumns => injectSorter(prefixCls, innerColumns, mergedSorterStates, triggerSorter, sortDirections, tableLocale, showSorterTooltip);\n\n  const getSorters = () => generateSorterInfo(mergedSorterStates);\n\n  return [transformColumns, mergedSorterStates, columnTitleSorterProps, getSorters];\n}","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/table/hooks/useSorter.js"],"names":["_toConsumableArray","CaretDownOutlined","CaretUpOutlined","classNames","KeyCode","React","Tooltip","getColumnKey","getColumnPos","renderColumnTitle","safeColumnTitle","ASCEND","DESCEND","getMultiplePriority","column","sorter","multiple","getSortFunction","compare","nextSortDirection","sortDirections","current","indexOf","collectSortStates","columns","init","pos","sortStates","pushState","columnPos","push","key","multiplePriority","sortOrder","forEach","index","children","concat","defaultSortOrder","injectSorter","prefixCls","sorterStates","triggerSorter","defaultSortDirections","tableLocale","tableShowSorterTooltip","map","newColumn","showSorterTooltip","undefined","columnKey","sorterState","find","_ref","nextSortOrder","sortIcon","upNode","includes","createElement","className","active","downNode","cancelSort","triggerAsc","triggerDesc","sortTip","tooltipProps","title","Object","assign","renderProps","renderSortTitle","onHeaderCell","col","cell","originOnClick","onClick","originOKeyDown","onKeyDown","event","keyCode","ENTER","renderTitle","displayTitle","toString","tabIndex","ellipsis","stateToInfo","order","field","dataIndex","generateSorterInfo","list","filter","_ref2","length","getSortData","data","childrenColumnName","innerSorterStates","slice","sort","a","b","cloneData","runningSorters","_ref3","record1","record2","i","compareFn","compareResult","record","subRecords","useFilterSorter","_ref4","mergedColumns","onSorterChange","useState","setSortStates","mergedSorterStates","useMemo","validate","collectedStates","validateStates","patchStates","state","multipleMode","columnTitleSorterProps","sortColumns","_ref5","sortColumn","sortState","newSorterStates","_ref6","transformColumns","innerColumns","getSorters"],"mappings":";AAAA,OAAOA,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,iBAAP,MAA8B,8CAA9B;AACA,OAAOC,eAAP,MAA4B,4CAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,iBAArC,EAAwDC,eAAxD,QAA+E,SAA/E;AACA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,OAAO,GAAG,SAAhB;;AACA,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;AACnC,MAAI,OAAOA,MAAM,CAACC,MAAd,KAAyB,QAAzB,IAAqC,OAAOD,MAAM,CAACC,MAAP,CAAcC,QAArB,KAAkC,QAA3E,EAAqF;AACnF,WAAOF,MAAM,CAACC,MAAP,CAAcC,QAArB;AACD;;AACD,SAAO,KAAP;AACD;;AACD,SAASC,eAAT,CAAyBF,MAAzB,EAAiC;AAC/B,MAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChC,WAAOA,MAAP;AACD;;AACD,MAAIA,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAA5B,IAAwCA,MAAM,CAACG,OAAnD,EAA4D;AAC1D,WAAOH,MAAM,CAACG,OAAd;AACD;;AACD,SAAO,KAAP;AACD;;AACD,SAASC,iBAAT,CAA2BC,cAA3B,EAA2CC,OAA3C,EAAoD;AAClD,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOD,cAAc,CAAC,CAAD,CAArB;AACD;;AACD,SAAOA,cAAc,CAACA,cAAc,CAACE,OAAf,CAAuBD,OAAvB,IAAkC,CAAnC,CAArB;AACD;;AACD,SAASE,iBAAT,CAA2BC,OAA3B,EAAoCC,IAApC,EAA0CC,GAA1C,EAA+C;AAC7C,MAAIC,UAAU,GAAG,EAAjB;;AACA,WAASC,SAAT,CAAmBd,MAAnB,EAA2Be,SAA3B,EAAsC;AACpCF,IAAAA,UAAU,CAACG,IAAX,CAAgB;AACdhB,MAAAA,MADc;AAEdiB,MAAAA,GAAG,EAAExB,YAAY,CAACO,MAAD,EAASe,SAAT,CAFH;AAGdG,MAAAA,gBAAgB,EAAEnB,mBAAmB,CAACC,MAAD,CAHvB;AAIdmB,MAAAA,SAAS,EAAEnB,MAAM,CAACmB;AAJJ,KAAhB;AAMD;;AACD,GAACT,OAAO,IAAI,EAAZ,EAAgBU,OAAhB,CAAwB,CAACpB,MAAD,EAASqB,KAAT,KAAmB;AACzC,UAAMN,SAAS,GAAGrB,YAAY,CAAC2B,KAAD,EAAQT,GAAR,CAA9B;;AACA,QAAIZ,MAAM,CAACsB,QAAX,EAAqB;AACnB,UAAI,eAAetB,MAAnB,EAA2B;AACzB;AACAc,QAAAA,SAAS,CAACd,MAAD,EAASe,SAAT,CAAT;AACD;;AACDF,MAAAA,UAAU,GAAG,GAAGU,MAAH,CAAUrC,kBAAkB,CAAC2B,UAAD,CAA5B,EAA0C3B,kBAAkB,CAACuB,iBAAiB,CAACT,MAAM,CAACsB,QAAR,EAAkBX,IAAlB,EAAwBI,SAAxB,CAAlB,CAA5D,CAAb;AACD,KAND,MAMO,IAAIf,MAAM,CAACC,MAAX,EAAmB;AACxB,UAAI,eAAeD,MAAnB,EAA2B;AACzB;AACAc,QAAAA,SAAS,CAACd,MAAD,EAASe,SAAT,CAAT;AACD,OAHD,MAGO,IAAIJ,IAAI,IAAIX,MAAM,CAACwB,gBAAnB,EAAqC;AAC1C;AACAX,QAAAA,UAAU,CAACG,IAAX,CAAgB;AACdhB,UAAAA,MADc;AAEdiB,UAAAA,GAAG,EAAExB,YAAY,CAACO,MAAD,EAASe,SAAT,CAFH;AAGdG,UAAAA,gBAAgB,EAAEnB,mBAAmB,CAACC,MAAD,CAHvB;AAIdmB,UAAAA,SAAS,EAAEnB,MAAM,CAACwB;AAJJ,SAAhB;AAMD;AACF;AACF,GAtBD;AAuBA,SAAOX,UAAP;AACD;;AACD,SAASY,YAAT,CAAsBC,SAAtB,EAAiChB,OAAjC,EAA0CiB,YAA1C,EAAwDC,aAAxD,EAAuEC,qBAAvE,EAA8FC,WAA9F,EAA2GC,sBAA3G,EAAmInB,GAAnI,EAAwI;AACtI,SAAO,CAACF,OAAO,IAAI,EAAZ,EAAgBsB,GAAhB,CAAoB,CAAChC,MAAD,EAASqB,KAAT,KAAmB;AAC5C,UAAMN,SAAS,GAAGrB,YAAY,CAAC2B,KAAD,EAAQT,GAAR,CAA9B;AACA,QAAIqB,SAAS,GAAGjC,MAAhB;;AACA,QAAIiC,SAAS,CAAChC,MAAd,EAAsB;AACpB,YAAMK,cAAc,GAAG2B,SAAS,CAAC3B,cAAV,IAA4BuB,qBAAnD;AACA,YAAMK,iBAAiB,GAAGD,SAAS,CAACC,iBAAV,KAAgCC,SAAhC,GAA4CJ,sBAA5C,GAAqEE,SAAS,CAACC,iBAAzG;AACA,YAAME,SAAS,GAAG3C,YAAY,CAACwC,SAAD,EAAYlB,SAAZ,CAA9B;AACA,YAAMsB,WAAW,GAAGV,YAAY,CAACW,IAAb,CAAkBC,IAAI,IAAI;AAAA,YAE1CtB,GAF0C,GAGxCsB,IAHwC,CAE1CtB,GAF0C;AAI5C,eAAOA,GAAG,KAAKmB,SAAf;AACD,OALmB,CAApB;AAMA,YAAMjB,SAAS,GAAGkB,WAAW,GAAGA,WAAW,CAAClB,SAAf,GAA2B,IAAxD;AACA,YAAMqB,aAAa,GAAGnC,iBAAiB,CAACC,cAAD,EAAiBa,SAAjB,CAAvC;AACA,UAAIlB,MAAJ;;AACA,UAAID,MAAM,CAACyC,QAAX,EAAqB;AACnBxC,QAAAA,MAAM,GAAGD,MAAM,CAACyC,QAAP,CAAgB;AACvBtB,UAAAA;AADuB,SAAhB,CAAT;AAGD,OAJD,MAIO;AACL,cAAMuB,MAAM,GAAGpC,cAAc,CAACqC,QAAf,CAAwB9C,MAAxB;AAAmC;AAAaN,QAAAA,KAAK,CAACqD,aAAN,CAAoBxD,eAApB,EAAqC;AAClGyD,UAAAA,SAAS,EAAExD,UAAU,CAAE,GAAEqC,SAAU,mBAAd,EAAkC;AACrDoB,YAAAA,MAAM,EAAE3B,SAAS,KAAKtB;AAD+B,WAAlC;AAD6E,SAArC,CAA/D;AAKA,cAAMkD,QAAQ,GAAGzC,cAAc,CAACqC,QAAf,CAAwB7C,OAAxB;AAAoC;AAAaP,QAAAA,KAAK,CAACqD,aAAN,CAAoBzD,iBAApB,EAAuC;AACvG0D,UAAAA,SAAS,EAAExD,UAAU,CAAE,GAAEqC,SAAU,qBAAd,EAAoC;AACvDoB,YAAAA,MAAM,EAAE3B,SAAS,KAAKrB;AADiC,WAApC;AADkF,SAAvC,CAAlE;AAKAG,QAAAA,MAAM;AAAG;AAAaV,QAAAA,KAAK,CAACqD,aAAN,CAAoB,MAApB,EAA4B;AAChDC,UAAAA,SAAS,EAAExD,UAAU,CAAE,GAAEqC,SAAU,gBAAd,EAA+B;AAClD,aAAE,GAAEA,SAAU,qBAAd,GAAqC,CAAC,EAAEgB,MAAM,IAAIK,QAAZ;AADY,WAA/B;AAD2B,SAA5B;AAInB;AAAaxD,QAAAA,KAAK,CAACqD,aAAN,CAAoB,MAApB,EAA4B;AAC1CC,UAAAA,SAAS,EAAG,GAAEnB,SAAU,sBADkB;AAE1C,yBAAe;AAF2B,SAA5B,EAGbgB,MAHa,EAGLK,QAHK,CAJM,CAAtB;AAQD;;AApCmB,oBAyChBjB,WAAW,IAAI,EAzCC;AAAA,YAsClBkB,UAtCkB,SAsClBA,UAtCkB;AAAA,YAuClBC,UAvCkB,SAuClBA,UAvCkB;AAAA,YAwClBC,WAxCkB,SAwClBA,WAxCkB;;AA0CpB,UAAIC,OAAO,GAAGH,UAAd;;AACA,UAAIR,aAAa,KAAK1C,OAAtB,EAA+B;AAC7BqD,QAAAA,OAAO,GAAGD,WAAV;AACD,OAFD,MAEO,IAAIV,aAAa,KAAK3C,MAAtB,EAA8B;AACnCsD,QAAAA,OAAO,GAAGF,UAAV;AACD;;AACD,YAAMG,YAAY,GAAG,OAAOlB,iBAAP,KAA6B,QAA7B,GAAwCA,iBAAxC,GAA4D;AAC/EmB,QAAAA,KAAK,EAAEF;AADwE,OAAjF;AAGAlB,MAAAA,SAAS,GAAGqB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBtB,SAAlB,CAAd,EAA4C;AACtDY,QAAAA,SAAS,EAAExD,UAAU,CAAC4C,SAAS,CAACY,SAAX,EAAsB;AACzC,WAAE,GAAEnB,SAAU,cAAd,GAA8BP;AADW,SAAtB,CADiC;AAItDkC,QAAAA,KAAK,EAAEG,WAAW,IAAI;AACpB,gBAAMC,eAAe;AAAG;AAAalE,UAAAA,KAAK,CAACqD,aAAN,CAAoB,KAApB,EAA2B;AAC9DC,YAAAA,SAAS,EAAG,GAAEnB,SAAU;AADsC,WAA3B;AAElC;AAAanC,UAAAA,KAAK,CAACqD,aAAN,CAAoB,MAApB,EAA4B;AAC1CC,YAAAA,SAAS,EAAG,GAAEnB,SAAU;AADkB,WAA5B,EAEb/B,iBAAiB,CAACK,MAAM,CAACqD,KAAR,EAAeG,WAAf,CAFJ,CAFqB,EAIavD,MAJb,CAArC;AAKA,iBAAOiC,iBAAiB;AAAG;AAAa3C,UAAAA,KAAK,CAACqD,aAAN,CAAoBpD,OAApB,EAA6B8D,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,YAAlB,CAA7B,EAA8DK,eAA9D,CAAhB,GAAiGA,eAAzH;AACD,SAXqD;AAYtDC,QAAAA,YAAY,EAAEC,GAAG,IAAI;AACnB,gBAAMC,IAAI,GAAG5D,MAAM,CAAC0D,YAAP,IAAuB1D,MAAM,CAAC0D,YAAP,CAAoBC,GAApB,CAAvB,IAAmD,EAAhE;AACA,gBAAME,aAAa,GAAGD,IAAI,CAACE,OAA3B;AACA,gBAAMC,cAAc,GAAGH,IAAI,CAACI,SAA5B;;AACAJ,UAAAA,IAAI,CAACE,OAAL,GAAeG,KAAK,IAAI;AACtBrC,YAAAA,aAAa,CAAC;AACZ5B,cAAAA,MADY;AAEZiB,cAAAA,GAAG,EAAEmB,SAFO;AAGZjB,cAAAA,SAAS,EAAEqB,aAHC;AAIZtB,cAAAA,gBAAgB,EAAEnB,mBAAmB,CAACC,MAAD;AAJzB,aAAD,CAAb;AAMA6D,YAAAA,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACI,KAAD,CAA3E;AACD,WARD;;AASAL,UAAAA,IAAI,CAACI,SAAL,GAAiBC,KAAK,IAAI;AACxB,gBAAIA,KAAK,CAACC,OAAN,KAAkB5E,OAAO,CAAC6E,KAA9B,EAAqC;AACnCvC,cAAAA,aAAa,CAAC;AACZ5B,gBAAAA,MADY;AAEZiB,gBAAAA,GAAG,EAAEmB,SAFO;AAGZjB,gBAAAA,SAAS,EAAEqB,aAHC;AAIZtB,gBAAAA,gBAAgB,EAAEnB,mBAAmB,CAACC,MAAD;AAJzB,eAAD,CAAb;AAMA+D,cAAAA,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,cAAc,CAACE,KAAD,CAA9E;AACD;AACF,WAVD;;AAWA,gBAAMG,WAAW,GAAGxE,eAAe,CAACI,MAAM,CAACqD,KAAR,EAAe,EAAf,CAAnC;AACA,gBAAMgB,YAAY,GAAGD,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAACE,QAAZ,EAA/E,CAzBmB,CA0BnB;;AACA,cAAInD,SAAJ,EAAe;AACbyC,YAAAA,IAAI,CAAC,WAAD,CAAJ,GAAoBzC,SAAS,KAAK,QAAd,GAAyB,WAAzB,GAAuC,YAA3D;AACD,WAFD,MAEO;AACLyC,YAAAA,IAAI,CAAC,YAAD,CAAJ,GAAqBS,YAAY,IAAI,EAArC;AACD;;AACDT,UAAAA,IAAI,CAACf,SAAL,GAAiBxD,UAAU,CAACuE,IAAI,CAACf,SAAN,EAAkB,GAAEnB,SAAU,qBAA9B,CAA3B;AACAkC,UAAAA,IAAI,CAACW,QAAL,GAAgB,CAAhB;;AACA,cAAIvE,MAAM,CAACwE,QAAX,EAAqB;AACnBZ,YAAAA,IAAI,CAACP,KAAL,GAAa,CAACe,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiDA,WAAjD,GAA+D,EAAhE,EAAoEE,QAApE,EAAb;AACD;;AACD,iBAAOV,IAAP;AACD;AAlDqD,OAA5C,CAAZ;AAoDD;;AACD,QAAI,cAAc3B,SAAlB,EAA6B;AAC3BA,MAAAA,SAAS,GAAGqB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBtB,SAAlB,CAAd,EAA4C;AACtDX,QAAAA,QAAQ,EAAEG,YAAY,CAACC,SAAD,EAAYO,SAAS,CAACX,QAAtB,EAAgCK,YAAhC,EAA8CC,aAA9C,EAA6DC,qBAA7D,EAAoFC,WAApF,EAAiGC,sBAAjG,EAAyHhB,SAAzH;AADgC,OAA5C,CAAZ;AAGD;;AACD,WAAOkB,SAAP;AACD,GAjHM,CAAP;AAkHD;;AACD,SAASwC,WAAT,CAAqB9C,YAArB,EAAmC;AAAA,QAE/B3B,MAF+B,GAI7B2B,YAJ6B,CAE/B3B,MAF+B;AAAA,QAG/BmB,SAH+B,GAI7BQ,YAJ6B,CAG/BR,SAH+B;AAKjC,SAAO;AACLnB,IAAAA,MADK;AAEL0E,IAAAA,KAAK,EAAEvD,SAFF;AAGLwD,IAAAA,KAAK,EAAE3E,MAAM,CAAC4E,SAHT;AAILxC,IAAAA,SAAS,EAAEpC,MAAM,CAACiB;AAJb,GAAP;AAMD;;AACD,SAAS4D,kBAAT,CAA4BlD,YAA5B,EAA0C;AACxC,QAAMmD,IAAI,GAAGnD,YAAY,CAACoD,MAAb,CAAoBC,KAAK,IAAI;AAAA,QAEtC7D,SAFsC,GAGpC6D,KAHoC,CAEtC7D,SAFsC;AAIxC,WAAOA,SAAP;AACD,GALY,EAKVa,GALU,CAKNyC,WALM,CAAb,CADwC,CAOxC;AACA;;AACA,MAAIK,IAAI,CAACG,MAAL,KAAgB,CAAhB,IAAqBtD,YAAY,CAACsD,MAAtC,EAA8C;AAC5C,WAAO3B,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBkB,WAAW,CAAC9C,YAAY,CAACA,YAAY,CAACsD,MAAb,GAAsB,CAAvB,CAAb,CAA7B,CAAd,EAAqF;AAC1FjF,MAAAA,MAAM,EAAEmC;AADkF,KAArF,CAAP;AAGD;;AACD,MAAI2C,IAAI,CAACG,MAAL,IAAe,CAAnB,EAAsB;AACpB,WAAOH,IAAI,CAAC,CAAD,CAAJ,IAAW,EAAlB;AACD;;AACD,SAAOA,IAAP;AACD;;AACD,OAAO,SAASI,WAAT,CAAqBC,IAArB,EAA2BtE,UAA3B,EAAuCuE,kBAAvC,EAA2D;AAChE,QAAMC,iBAAiB,GAAGxE,UAAU,CAACyE,KAAX,GAAmBC,IAAnB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACvE,gBAAF,GAAqBsE,CAAC,CAACtE,gBAAzD,CAA1B;AACA,QAAMwE,SAAS,GAAGP,IAAI,CAACG,KAAL,EAAlB;AACA,QAAMK,cAAc,GAAGN,iBAAiB,CAACN,MAAlB,CAAyBa,KAAK,IAAI;AAAA,QAGnD3F,MAHmD,GAMnD2F,KANmD,CAErD5F,MAFqD,CAGnDC,MAHmD;AAAA,QAKrDkB,SALqD,GAMnDyE,KANmD,CAKrDzE,SALqD;AAOvD,WAAOhB,eAAe,CAACF,MAAD,CAAf,IAA2BkB,SAAlC;AACD,GARsB,CAAvB,CAHgE,CAYhE;;AACA,MAAI,CAACwE,cAAc,CAACV,MAApB,EAA4B;AAC1B,WAAOS,SAAP;AACD;;AACD,SAAOA,SAAS,CAACH,IAAV,CAAe,CAACM,OAAD,EAAUC,OAAV,KAAsB;AAC1C,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,cAAc,CAACV,MAAnC,EAA2Cc,CAAC,IAAI,CAAhD,EAAmD;AACjD,YAAM1D,WAAW,GAAGsD,cAAc,CAACI,CAAD,CAAlC;AADiD,YAI7C9F,MAJ6C,GAO7CoC,WAP6C,CAG/CrC,MAH+C,CAI7CC,MAJ6C;AAAA,YAM/CkB,SAN+C,GAO7CkB,WAP6C,CAM/ClB,SAN+C;AAQjD,YAAM6E,SAAS,GAAG7F,eAAe,CAACF,MAAD,CAAjC;;AACA,UAAI+F,SAAS,IAAI7E,SAAjB,EAA4B;AAC1B,cAAM8E,aAAa,GAAGD,SAAS,CAACH,OAAD,EAAUC,OAAV,EAAmB3E,SAAnB,CAA/B;;AACA,YAAI8E,aAAa,KAAK,CAAtB,EAAyB;AACvB,iBAAO9E,SAAS,KAAKtB,MAAd,GAAuBoG,aAAvB,GAAuC,CAACA,aAA/C;AACD;AACF;AACF;;AACD,WAAO,CAAP;AACD,GAlBM,EAkBJjE,GAlBI,CAkBAkE,MAAM,IAAI;AACf,UAAMC,UAAU,GAAGD,MAAM,CAACd,kBAAD,CAAzB;;AACA,QAAIe,UAAJ,EAAgB;AACd,aAAO7C,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB2C,MAAlB,CAAd,EAAyC;AAC9C,SAACd,kBAAD,GAAsBF,WAAW,CAACiB,UAAD,EAAatF,UAAb,EAAyBuE,kBAAzB;AADa,OAAzC,CAAP;AAGD;;AACD,WAAOc,MAAP;AACD,GA1BM,CAAP;AA2BD;AACD,eAAe,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AAAA,MAE3C3E,SAF2C,GAQzC2E,KARyC,CAE3C3E,SAF2C;AAAA,MAG3C4E,aAH2C,GAQzCD,KARyC,CAG3CC,aAH2C;AAAA,MAI3CC,cAJ2C,GAQzCF,KARyC,CAI3CE,cAJ2C;AAAA,MAK3CjG,cAL2C,GAQzC+F,KARyC,CAK3C/F,cAL2C;AAAA,MAM3CwB,WAN2C,GAQzCuE,KARyC,CAM3CvE,WAN2C;AAAA,MAO3CI,iBAP2C,GAQzCmE,KARyC,CAO3CnE,iBAP2C;;AAAA,0BAST3C,KAAK,CAACiH,QAAN,CAAe/F,iBAAiB,CAAC6F,aAAD,EAAgB,IAAhB,CAAhC,CATS;AAAA;AAAA,QAStCzF,UATsC;AAAA,QAS1B4F,aAT0B;;AAU7C,QAAMC,kBAAkB,GAAGnH,KAAK,CAACoH,OAAN,CAAc,MAAM;AAC7C,QAAIC,QAAQ,GAAG,IAAf;AACA,UAAMC,eAAe,GAAGpG,iBAAiB,CAAC6F,aAAD,EAAgB,KAAhB,CAAzC,CAF6C,CAG7C;;AACA,QAAI,CAACO,eAAe,CAAC5B,MAArB,EAA6B;AAC3B,aAAOpE,UAAP;AACD;;AACD,UAAMiG,cAAc,GAAG,EAAvB;;AACA,aAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,UAAIJ,QAAJ,EAAc;AACZE,QAAAA,cAAc,CAAC9F,IAAf,CAAoBgG,KAApB;AACD,OAFD,MAEO;AACLF,QAAAA,cAAc,CAAC9F,IAAf,CAAoBsC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkByD,KAAlB,CAAd,EAAwC;AAC1D7F,UAAAA,SAAS,EAAE;AAD+C,SAAxC,CAApB;AAGD;AACF;;AACD,QAAI8F,YAAY,GAAG,IAAnB;AACAJ,IAAAA,eAAe,CAACzF,OAAhB,CAAwB4F,KAAK,IAAI;AAC/B,UAAIC,YAAY,KAAK,IAArB,EAA2B;AACzBF,QAAAA,WAAW,CAACC,KAAD,CAAX;;AACA,YAAIA,KAAK,CAAC7F,SAAV,EAAqB;AACnB,cAAI6F,KAAK,CAAC9F,gBAAN,KAA2B,KAA/B,EAAsC;AACpC0F,YAAAA,QAAQ,GAAG,KAAX;AACD,WAFD,MAEO;AACLK,YAAAA,YAAY,GAAG,IAAf;AACD;AACF;AACF,OATD,MASO,IAAIA,YAAY,IAAID,KAAK,CAAC9F,gBAAN,KAA2B,KAA/C,EAAsD;AAC3D6F,QAAAA,WAAW,CAACC,KAAD,CAAX;AACD,OAFM,MAEA;AACLJ,QAAAA,QAAQ,GAAG,KAAX;AACAG,QAAAA,WAAW,CAACC,KAAD,CAAX;AACD;AACF,KAhBD;AAiBA,WAAOF,cAAP;AACD,GApC0B,EAoCxB,CAACR,aAAD,EAAgBzF,UAAhB,CApCwB,CAA3B,CAV6C,CA+C7C;;AACA,QAAMqG,sBAAsB,GAAG3H,KAAK,CAACoH,OAAN,CAAc,MAAM;AACjD,UAAMQ,WAAW,GAAGT,kBAAkB,CAAC1E,GAAnB,CAAuBoF,KAAK,IAAI;AAAA,UAEhDpH,MAFgD,GAI9CoH,KAJ8C,CAEhDpH,MAFgD;AAAA,UAGhDmB,SAHgD,GAI9CiG,KAJ8C,CAGhDjG,SAHgD;AAKlD,aAAO;AACLnB,QAAAA,MADK;AAEL0E,QAAAA,KAAK,EAAEvD;AAFF,OAAP;AAID,KATmB,CAApB;AAUA,WAAO;AACLgG,MAAAA,WADK;AAEL;AACAE,MAAAA,UAAU,EAAEF,WAAW,CAAC,CAAD,CAAX,IAAkBA,WAAW,CAAC,CAAD,CAAX,CAAenH,MAHxC;AAILmB,MAAAA,SAAS,EAAEgG,WAAW,CAAC,CAAD,CAAX,IAAkBA,WAAW,CAAC,CAAD,CAAX,CAAezC;AAJvC,KAAP;AAMD,GAjB8B,EAiB5B,CAACgC,kBAAD,CAjB4B,CAA/B;;AAkBA,WAAS9E,aAAT,CAAuB0F,SAAvB,EAAkC;AAChC,QAAIC,eAAJ;;AACA,QAAID,SAAS,CAACpG,gBAAV,KAA+B,KAA/B,IAAwC,CAACwF,kBAAkB,CAACzB,MAA5D,IAAsEyB,kBAAkB,CAAC,CAAD,CAAlB,CAAsBxF,gBAAtB,KAA2C,KAArH,EAA4H;AAC1HqG,MAAAA,eAAe,GAAG,CAACD,SAAD,CAAlB;AACD,KAFD,MAEO;AACLC,MAAAA,eAAe,GAAG,GAAGhG,MAAH,CAAUrC,kBAAkB,CAACwH,kBAAkB,CAAC3B,MAAnB,CAA0ByC,KAAK,IAAI;AAAA,YAE9EvG,GAF8E,GAG5EuG,KAH4E,CAE9EvG,GAF8E;AAIhF,eAAOA,GAAG,KAAKqG,SAAS,CAACrG,GAAzB;AACD,OAL8C,CAAD,CAA5B,EAKb,CAACqG,SAAD,CALa,CAAlB;AAMD;;AACDb,IAAAA,aAAa,CAACc,eAAD,CAAb;AACAhB,IAAAA,cAAc,CAAC1B,kBAAkB,CAAC0C,eAAD,CAAnB,EAAsCA,eAAtC,CAAd;AACD;;AACD,QAAME,gBAAgB,GAAGC,YAAY,IAAIjG,YAAY,CAACC,SAAD,EAAYgG,YAAZ,EAA0BhB,kBAA1B,EAA8C9E,aAA9C,EAA6DtB,cAA7D,EAA6EwB,WAA7E,EAA0FI,iBAA1F,CAArD;;AACA,QAAMyF,UAAU,GAAG,MAAM9C,kBAAkB,CAAC6B,kBAAD,CAA3C;;AACA,SAAO,CAACe,gBAAD,EAAmBf,kBAAnB,EAAuCQ,sBAAvC,EAA+DS,UAA/D,CAAP;AACD","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport CaretDownOutlined from \"@ant-design/icons/es/icons/CaretDownOutlined\";\nimport CaretUpOutlined from \"@ant-design/icons/es/icons/CaretUpOutlined\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport * as React from 'react';\nimport Tooltip from '../../tooltip';\nimport { getColumnKey, getColumnPos, renderColumnTitle, safeColumnTitle } from '../util';\nconst ASCEND = 'ascend';\nconst DESCEND = 'descend';\nfunction getMultiplePriority(column) {\n  if (typeof column.sorter === 'object' && typeof column.sorter.multiple === 'number') {\n    return column.sorter.multiple;\n  }\n  return false;\n}\nfunction getSortFunction(sorter) {\n  if (typeof sorter === 'function') {\n    return sorter;\n  }\n  if (sorter && typeof sorter === 'object' && sorter.compare) {\n    return sorter.compare;\n  }\n  return false;\n}\nfunction nextSortDirection(sortDirections, current) {\n  if (!current) {\n    return sortDirections[0];\n  }\n  return sortDirections[sortDirections.indexOf(current) + 1];\n}\nfunction collectSortStates(columns, init, pos) {\n  let sortStates = [];\n  function pushState(column, columnPos) {\n    sortStates.push({\n      column,\n      key: getColumnKey(column, columnPos),\n      multiplePriority: getMultiplePriority(column),\n      sortOrder: column.sortOrder\n    });\n  }\n  (columns || []).forEach((column, index) => {\n    const columnPos = getColumnPos(index, pos);\n    if (column.children) {\n      if ('sortOrder' in column) {\n        // Controlled\n        pushState(column, columnPos);\n      }\n      sortStates = [].concat(_toConsumableArray(sortStates), _toConsumableArray(collectSortStates(column.children, init, columnPos)));\n    } else if (column.sorter) {\n      if ('sortOrder' in column) {\n        // Controlled\n        pushState(column, columnPos);\n      } else if (init && column.defaultSortOrder) {\n        // Default sorter\n        sortStates.push({\n          column,\n          key: getColumnKey(column, columnPos),\n          multiplePriority: getMultiplePriority(column),\n          sortOrder: column.defaultSortOrder\n        });\n      }\n    }\n  });\n  return sortStates;\n}\nfunction injectSorter(prefixCls, columns, sorterStates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, pos) {\n  return (columns || []).map((column, index) => {\n    const columnPos = getColumnPos(index, pos);\n    let newColumn = column;\n    if (newColumn.sorter) {\n      const sortDirections = newColumn.sortDirections || defaultSortDirections;\n      const showSorterTooltip = newColumn.showSorterTooltip === undefined ? tableShowSorterTooltip : newColumn.showSorterTooltip;\n      const columnKey = getColumnKey(newColumn, columnPos);\n      const sorterState = sorterStates.find(_ref => {\n        let {\n          key\n        } = _ref;\n        return key === columnKey;\n      });\n      const sortOrder = sorterState ? sorterState.sortOrder : null;\n      const nextSortOrder = nextSortDirection(sortDirections, sortOrder);\n      let sorter;\n      if (column.sortIcon) {\n        sorter = column.sortIcon({\n          sortOrder\n        });\n      } else {\n        const upNode = sortDirections.includes(ASCEND) && /*#__PURE__*/React.createElement(CaretUpOutlined, {\n          className: classNames(`${prefixCls}-column-sorter-up`, {\n            active: sortOrder === ASCEND\n          })\n        });\n        const downNode = sortDirections.includes(DESCEND) && /*#__PURE__*/React.createElement(CaretDownOutlined, {\n          className: classNames(`${prefixCls}-column-sorter-down`, {\n            active: sortOrder === DESCEND\n          })\n        });\n        sorter = /*#__PURE__*/React.createElement(\"span\", {\n          className: classNames(`${prefixCls}-column-sorter`, {\n            [`${prefixCls}-column-sorter-full`]: !!(upNode && downNode)\n          })\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: `${prefixCls}-column-sorter-inner`,\n          \"aria-hidden\": \"true\"\n        }, upNode, downNode));\n      }\n      const {\n        cancelSort,\n        triggerAsc,\n        triggerDesc\n      } = tableLocale || {};\n      let sortTip = cancelSort;\n      if (nextSortOrder === DESCEND) {\n        sortTip = triggerDesc;\n      } else if (nextSortOrder === ASCEND) {\n        sortTip = triggerAsc;\n      }\n      const tooltipProps = typeof showSorterTooltip === 'object' ? showSorterTooltip : {\n        title: sortTip\n      };\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        className: classNames(newColumn.className, {\n          [`${prefixCls}-column-sort`]: sortOrder\n        }),\n        title: renderProps => {\n          const renderSortTitle = /*#__PURE__*/React.createElement(\"div\", {\n            className: `${prefixCls}-column-sorters`\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: `${prefixCls}-column-title`\n          }, renderColumnTitle(column.title, renderProps)), sorter);\n          return showSorterTooltip ? /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, tooltipProps), renderSortTitle) : renderSortTitle;\n        },\n        onHeaderCell: col => {\n          const cell = column.onHeaderCell && column.onHeaderCell(col) || {};\n          const originOnClick = cell.onClick;\n          const originOKeyDown = cell.onKeyDown;\n          cell.onClick = event => {\n            triggerSorter({\n              column,\n              key: columnKey,\n              sortOrder: nextSortOrder,\n              multiplePriority: getMultiplePriority(column)\n            });\n            originOnClick === null || originOnClick === void 0 ? void 0 : originOnClick(event);\n          };\n          cell.onKeyDown = event => {\n            if (event.keyCode === KeyCode.ENTER) {\n              triggerSorter({\n                column,\n                key: columnKey,\n                sortOrder: nextSortOrder,\n                multiplePriority: getMultiplePriority(column)\n              });\n              originOKeyDown === null || originOKeyDown === void 0 ? void 0 : originOKeyDown(event);\n            }\n          };\n          const renderTitle = safeColumnTitle(column.title, {});\n          const displayTitle = renderTitle === null || renderTitle === void 0 ? void 0 : renderTitle.toString();\n          // Inform the screen-reader so it can tell the visually impaired user which column is sorted\n          if (sortOrder) {\n            cell['aria-sort'] = sortOrder === 'ascend' ? 'ascending' : 'descending';\n          } else {\n            cell['aria-label'] = displayTitle || '';\n          }\n          cell.className = classNames(cell.className, `${prefixCls}-column-has-sorters`);\n          cell.tabIndex = 0;\n          if (column.ellipsis) {\n            cell.title = (renderTitle !== null && renderTitle !== void 0 ? renderTitle : '').toString();\n          }\n          return cell;\n        }\n      });\n    }\n    if ('children' in newColumn) {\n      newColumn = Object.assign(Object.assign({}, newColumn), {\n        children: injectSorter(prefixCls, newColumn.children, sorterStates, triggerSorter, defaultSortDirections, tableLocale, tableShowSorterTooltip, columnPos)\n      });\n    }\n    return newColumn;\n  });\n}\nfunction stateToInfo(sorterStates) {\n  const {\n    column,\n    sortOrder\n  } = sorterStates;\n  return {\n    column,\n    order: sortOrder,\n    field: column.dataIndex,\n    columnKey: column.key\n  };\n}\nfunction generateSorterInfo(sorterStates) {\n  const list = sorterStates.filter(_ref2 => {\n    let {\n      sortOrder\n    } = _ref2;\n    return sortOrder;\n  }).map(stateToInfo);\n  // =========== Legacy compatible support ===========\n  // https://github.com/ant-design/ant-design/pull/19226\n  if (list.length === 0 && sorterStates.length) {\n    return Object.assign(Object.assign({}, stateToInfo(sorterStates[sorterStates.length - 1])), {\n      column: undefined\n    });\n  }\n  if (list.length <= 1) {\n    return list[0] || {};\n  }\n  return list;\n}\nexport function getSortData(data, sortStates, childrenColumnName) {\n  const innerSorterStates = sortStates.slice().sort((a, b) => b.multiplePriority - a.multiplePriority);\n  const cloneData = data.slice();\n  const runningSorters = innerSorterStates.filter(_ref3 => {\n    let {\n      column: {\n        sorter\n      },\n      sortOrder\n    } = _ref3;\n    return getSortFunction(sorter) && sortOrder;\n  });\n  // Skip if no sorter needed\n  if (!runningSorters.length) {\n    return cloneData;\n  }\n  return cloneData.sort((record1, record2) => {\n    for (let i = 0; i < runningSorters.length; i += 1) {\n      const sorterState = runningSorters[i];\n      const {\n        column: {\n          sorter\n        },\n        sortOrder\n      } = sorterState;\n      const compareFn = getSortFunction(sorter);\n      if (compareFn && sortOrder) {\n        const compareResult = compareFn(record1, record2, sortOrder);\n        if (compareResult !== 0) {\n          return sortOrder === ASCEND ? compareResult : -compareResult;\n        }\n      }\n    }\n    return 0;\n  }).map(record => {\n    const subRecords = record[childrenColumnName];\n    if (subRecords) {\n      return Object.assign(Object.assign({}, record), {\n        [childrenColumnName]: getSortData(subRecords, sortStates, childrenColumnName)\n      });\n    }\n    return record;\n  });\n}\nexport default function useFilterSorter(_ref4) {\n  let {\n    prefixCls,\n    mergedColumns,\n    onSorterChange,\n    sortDirections,\n    tableLocale,\n    showSorterTooltip\n  } = _ref4;\n  const [sortStates, setSortStates] = React.useState(collectSortStates(mergedColumns, true));\n  const mergedSorterStates = React.useMemo(() => {\n    let validate = true;\n    const collectedStates = collectSortStates(mergedColumns, false);\n    // Return if not controlled\n    if (!collectedStates.length) {\n      return sortStates;\n    }\n    const validateStates = [];\n    function patchStates(state) {\n      if (validate) {\n        validateStates.push(state);\n      } else {\n        validateStates.push(Object.assign(Object.assign({}, state), {\n          sortOrder: null\n        }));\n      }\n    }\n    let multipleMode = null;\n    collectedStates.forEach(state => {\n      if (multipleMode === null) {\n        patchStates(state);\n        if (state.sortOrder) {\n          if (state.multiplePriority === false) {\n            validate = false;\n          } else {\n            multipleMode = true;\n          }\n        }\n      } else if (multipleMode && state.multiplePriority !== false) {\n        patchStates(state);\n      } else {\n        validate = false;\n        patchStates(state);\n      }\n    });\n    return validateStates;\n  }, [mergedColumns, sortStates]);\n  // Get render columns title required props\n  const columnTitleSorterProps = React.useMemo(() => {\n    const sortColumns = mergedSorterStates.map(_ref5 => {\n      let {\n        column,\n        sortOrder\n      } = _ref5;\n      return {\n        column,\n        order: sortOrder\n      };\n    });\n    return {\n      sortColumns,\n      // Legacy\n      sortColumn: sortColumns[0] && sortColumns[0].column,\n      sortOrder: sortColumns[0] && sortColumns[0].order\n    };\n  }, [mergedSorterStates]);\n  function triggerSorter(sortState) {\n    let newSorterStates;\n    if (sortState.multiplePriority === false || !mergedSorterStates.length || mergedSorterStates[0].multiplePriority === false) {\n      newSorterStates = [sortState];\n    } else {\n      newSorterStates = [].concat(_toConsumableArray(mergedSorterStates.filter(_ref6 => {\n        let {\n          key\n        } = _ref6;\n        return key !== sortState.key;\n      })), [sortState]);\n    }\n    setSortStates(newSorterStates);\n    onSorterChange(generateSorterInfo(newSorterStates), newSorterStates);\n  }\n  const transformColumns = innerColumns => injectSorter(prefixCls, innerColumns, mergedSorterStates, triggerSorter, sortDirections, tableLocale, showSorterTooltip);\n  const getSorters = () => generateSorterInfo(mergedSorterStates);\n  return [transformColumns, mergedSorterStates, columnTitleSorterProps, getSorters];\n}"]},"metadata":{},"sourceType":"module"}