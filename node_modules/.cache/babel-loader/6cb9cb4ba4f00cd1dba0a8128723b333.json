{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport React, { useMemo } from 'react';\nimport Select from '../../select';\nimport { ColorFormat } from '../interface';\nimport ColorAlphaInput from './ColorAlphaInput';\nimport ColorHexInput from './ColorHexInput';\nimport ColorHsbInput from './ColorHsbInput';\nimport ColorRgbInput from './ColorRgbInput';\nvar selectOptions = [ColorFormat.hex, ColorFormat.hsb, ColorFormat.rgb].map(function (format) {\n  return {\n    value: format,\n    label: format.toLocaleUpperCase()\n  };\n});\n\nvar ColorInput = function ColorInput(props) {\n  var prefixCls = props.prefixCls,\n      format = props.format,\n      value = props.value,\n      onFormatChange = props.onFormatChange,\n      onChange = props.onChange;\n\n  var _useMergedState = useMergedState(ColorFormat.hex, {\n    value: format,\n    onChange: onFormatChange\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      colorFormat = _useMergedState2[0],\n      setColorFormat = _useMergedState2[1];\n\n  var colorInputPrefixCls = \"\".concat(prefixCls, \"-input\");\n\n  var handleFormatChange = function handleFormatChange(newFormat) {\n    setColorFormat(newFormat);\n  };\n\n  var steppersNode = useMemo(function () {\n    var inputProps = {\n      value: value,\n      prefixCls: prefixCls,\n      onChange: onChange\n    };\n\n    switch (colorFormat) {\n      case ColorFormat.hsb:\n        return (\n          /*#__PURE__*/\n          React.createElement(ColorHsbInput, Object.assign({}, inputProps))\n        );\n\n      case ColorFormat.rgb:\n        return (\n          /*#__PURE__*/\n          React.createElement(ColorRgbInput, Object.assign({}, inputProps))\n        );\n\n      case ColorFormat.hex:\n      default:\n        return (\n          /*#__PURE__*/\n          React.createElement(ColorHexInput, Object.assign({}, inputProps))\n        );\n    }\n  }, [colorFormat, prefixCls, value, onChange]);\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"\".concat(colorInputPrefixCls, \"-container\")\n    },\n    /*#__PURE__*/\n    React.createElement(Select, {\n      value: colorFormat,\n      bordered: false,\n      getPopupContainer: function getPopupContainer(current) {\n        return current;\n      },\n      popupMatchSelectWidth: 68,\n      placement: \"bottomRight\",\n      onChange: handleFormatChange,\n      className: \"\".concat(prefixCls, \"-format-select\"),\n      size: \"small\",\n      options: selectOptions\n    }),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: colorInputPrefixCls\n    }, steppersNode),\n    /*#__PURE__*/\n    React.createElement(ColorAlphaInput, {\n      prefixCls: prefixCls,\n      value: value,\n      onChange: onChange\n    }))\n  );\n};\n\nexport default ColorInput;","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/color-picker/components/ColorInput.js"],"names":["useMergedState","React","useMemo","Select","ColorFormat","ColorAlphaInput","ColorHexInput","ColorHsbInput","ColorRgbInput","selectOptions","hex","hsb","rgb","map","format","value","label","toLocaleUpperCase","ColorInput","props","prefixCls","onFormatChange","onChange","colorFormat","setColorFormat","colorInputPrefixCls","handleFormatChange","newFormat","steppersNode","inputProps","createElement","Object","assign","className","bordered","getPopupContainer","current","popupMatchSelectWidth","placement","size","options"],"mappings":"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","sourcesContent":["import useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport React, { useMemo } from 'react';\nimport Select from '../../select';\nimport { ColorFormat } from '../interface';\nimport ColorAlphaInput from './ColorAlphaInput';\nimport ColorHexInput from './ColorHexInput';\nimport ColorHsbInput from './ColorHsbInput';\nimport ColorRgbInput from './ColorRgbInput';\nconst selectOptions = [ColorFormat.hex, ColorFormat.hsb, ColorFormat.rgb].map(format => ({\n  value: format,\n  label: format.toLocaleUpperCase()\n}));\nconst ColorInput = props => {\n  const {\n    prefixCls,\n    format,\n    value,\n    onFormatChange,\n    onChange\n  } = props;\n  const [colorFormat, setColorFormat] = useMergedState(ColorFormat.hex, {\n    value: format,\n    onChange: onFormatChange\n  });\n  const colorInputPrefixCls = `${prefixCls}-input`;\n  const handleFormatChange = newFormat => {\n    setColorFormat(newFormat);\n  };\n  const steppersNode = useMemo(() => {\n    const inputProps = {\n      value,\n      prefixCls,\n      onChange\n    };\n    switch (colorFormat) {\n      case ColorFormat.hsb:\n        return /*#__PURE__*/React.createElement(ColorHsbInput, Object.assign({}, inputProps));\n      case ColorFormat.rgb:\n        return /*#__PURE__*/React.createElement(ColorRgbInput, Object.assign({}, inputProps));\n      case ColorFormat.hex:\n      default:\n        return /*#__PURE__*/React.createElement(ColorHexInput, Object.assign({}, inputProps));\n    }\n  }, [colorFormat, prefixCls, value, onChange]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `${colorInputPrefixCls}-container`\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: colorFormat,\n    bordered: false,\n    getPopupContainer: current => current,\n    popupMatchSelectWidth: 68,\n    placement: \"bottomRight\",\n    onChange: handleFormatChange,\n    className: `${prefixCls}-format-select`,\n    size: \"small\",\n    options: selectOptions\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: colorInputPrefixCls\n  }, steppersNode), /*#__PURE__*/React.createElement(ColorAlphaInput, {\n    prefixCls: prefixCls,\n    value: value,\n    onChange: onChange\n  }));\n};\nexport default ColorInput;"]},"metadata":{},"sourceType":"module"}