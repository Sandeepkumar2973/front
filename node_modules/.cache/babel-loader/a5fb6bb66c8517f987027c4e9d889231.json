{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport React, { useContext, useRef, useState } from 'react';\nimport genPurePanel from '../_util/PurePanel';\nimport { ConfigContext } from '../config-provider/context';\nimport Popover from '../popover';\nimport theme from '../theme';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style/index';\nimport { customizePrefixCls, generateColor } from './util';\n\nvar ColorPicker = function ColorPicker(props) {\n  var value = props.value,\n      defaultValue = props.defaultValue,\n      format = props.format,\n      _props$allowClear = props.allowClear,\n      allowClear = _props$allowClear === void 0 ? false : _props$allowClear,\n      presets = props.presets,\n      children = props.children,\n      _props$trigger = props.trigger,\n      trigger = _props$trigger === void 0 ? 'click' : _props$trigger,\n      open = props.open,\n      disabled = props.disabled,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'bottomLeft' : _props$placement,\n      _props$arrow = props.arrow,\n      arrow = _props$arrow === void 0 ? true : _props$arrow,\n      style = props.style,\n      className = props.className,\n      rootClassName = props.rootClassName,\n      styles = props.styles,\n      onFormatChange = props.onFormatChange,\n      onChange = props.onChange,\n      onClear = props.onClear,\n      onOpenChange = props.onOpenChange,\n      getPopupContainer = props.getPopupContainer,\n      _props$autoAdjustOver = props.autoAdjustOverflow,\n      autoAdjustOverflow = _props$autoAdjustOver === void 0 ? true : _props$autoAdjustOver;\n\n  var _useContext = useContext(ConfigContext),\n      getPrefixCls = _useContext.getPrefixCls,\n      direction = _useContext.direction;\n\n  var _theme$useToken = theme.useToken(),\n      token = _theme$useToken.token;\n\n  var _useColorState = useColorState(token.colorPrimary, {\n    value: value,\n    defaultValue: defaultValue\n  }),\n      _useColorState2 = _slicedToArray(_useColorState, 2),\n      colorValue = _useColorState2[0],\n      setColorValue = _useColorState2[1];\n\n  var _useMergedState = useMergedState(false, {\n    value: open,\n    postState: function postState(openData) {\n      return !disabled && openData;\n    },\n    onChange: onOpenChange\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      popupOpen = _useMergedState2[0],\n      setPopupOpen = _useMergedState2[1];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      colorCleared = _useState2[0],\n      setColorCleared = _useState2[1];\n\n  var prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n\n  var _useStyle = useStyle(prefixCls),\n      _useStyle2 = _slicedToArray(_useStyle, 2),\n      wrapSSR = _useStyle2[0],\n      hashId = _useStyle2[1];\n\n  var rtlCls = _defineProperty({}, \"\".concat(prefixCls, \"-rtl\"), direction);\n\n  var mergeRootCls = classNames(rootClassName, rtlCls);\n  var mergeCls = classNames(mergeRootCls, className, hashId);\n  var mergePopupCls = classNames(prefixCls, rtlCls);\n  var popupAllowCloseRef = useRef(true);\n\n  var handleChange = function handleChange(data, type, pickColor) {\n    var color = generateColor(data);\n\n    if (colorCleared) {\n      setColorCleared(false);\n      var hsba = color.toHsb(); // ignore alpha slider\n\n      if (colorValue.toHsb().a === 0 && type !== 'alpha') {\n        hsba.a = 1;\n        color = generateColor(hsba);\n      }\n    }\n\n    if (!value) {\n      setColorValue(color);\n    } // Only for drag-and-drop color picking\n\n\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    }\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n\n  var handleClear = function handleClear() {\n    setColorCleared(true);\n    onClear === null || onClear === void 0 ? void 0 : onClear();\n  };\n\n  var handleChangeComplete = function handleChangeComplete() {\n    popupAllowCloseRef.current = true;\n  };\n\n  var popoverProps = {\n    open: popupOpen,\n    trigger: trigger,\n    placement: placement,\n    arrow: arrow,\n    rootClassName: rootClassName,\n    getPopupContainer: getPopupContainer,\n    autoAdjustOverflow: autoAdjustOverflow\n  };\n  var colorBaseProps = {\n    prefixCls: prefixCls,\n    color: colorValue,\n    allowClear: allowClear,\n    colorCleared: colorCleared,\n    disabled: disabled,\n    presets: presets,\n    format: format,\n    onFormatChange: onFormatChange\n  };\n  return wrapSSR(\n  /*#__PURE__*/\n  React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    onOpenChange: function onOpenChange(visible) {\n      if (popupAllowCloseRef.current) {\n        setPopupOpen(visible);\n      }\n    },\n    content:\n    /*#__PURE__*/\n    React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    })),\n    overlayClassName: mergePopupCls\n  }, popoverProps), children ||\n  /*#__PURE__*/\n  React.createElement(ColorTrigger, {\n    open: popupOpen,\n    className: mergeCls,\n    style: style,\n    color: colorValue,\n    prefixCls: prefixCls,\n    disabled: disabled,\n    colorCleared: colorCleared\n  })));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\n\nvar PurePanel = genPurePanel(ColorPicker, 'color-picker',\n/* istanbul ignore next */\nfunction (prefixCls) {\n  return prefixCls;\n}, function (props) {\n  return Object.assign(Object.assign({}, props), {\n    placement: 'bottom',\n    autoAdjustOverflow: false\n  });\n});\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/color-picker/ColorPicker.js"],"names":["classNames","useMergedState","React","useContext","useRef","useState","genPurePanel","ConfigContext","Popover","theme","ColorPickerPanel","ColorTrigger","useColorState","useStyle","customizePrefixCls","generateColor","ColorPicker","props","value","defaultValue","format","allowClear","presets","children","trigger","open","disabled","placement","arrow","style","className","rootClassName","styles","onFormatChange","onChange","onClear","onOpenChange","getPopupContainer","autoAdjustOverflow","getPrefixCls","direction","useToken","token","colorPrimary","colorValue","setColorValue","postState","openData","popupOpen","setPopupOpen","colorCleared","setColorCleared","prefixCls","wrapSSR","hashId","rtlCls","mergeRootCls","mergeCls","mergePopupCls","popupAllowCloseRef","handleChange","data","type","pickColor","color","hsba","toHsb","a","current","toHexString","handleClear","handleChangeComplete","popoverProps","colorBaseProps","createElement","Object","assign","popup","visible","content","onChangeComplete","overlayClassName","process","env","NODE_ENV","displayName","PurePanel","_InternalPanelDoNotUseOrYouWillBeFired"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport React, { useContext, useRef, useState } from 'react';\nimport genPurePanel from '../_util/PurePanel';\nimport { ConfigContext } from '../config-provider/context';\nimport Popover from '../popover';\nimport theme from '../theme';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style/index';\nimport { customizePrefixCls, generateColor } from './util';\nconst ColorPicker = props => {\n  const {\n    value,\n    defaultValue,\n    format,\n    allowClear = false,\n    presets,\n    children,\n    trigger = 'click',\n    open,\n    disabled,\n    placement = 'bottomLeft',\n    arrow = true,\n    style,\n    className,\n    rootClassName,\n    styles,\n    onFormatChange,\n    onChange,\n    onClear,\n    onOpenChange,\n    getPopupContainer,\n    autoAdjustOverflow = true\n  } = props;\n  const {\n    getPrefixCls,\n    direction\n  } = useContext(ConfigContext);\n  const {\n    token\n  } = theme.useToken();\n  const [colorValue, setColorValue] = useColorState(token.colorPrimary, {\n    value,\n    defaultValue\n  });\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !disabled && openData,\n    onChange: onOpenChange\n  });\n  const [colorCleared, setColorCleared] = useState(false);\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergeRootCls = classNames(rootClassName, rtlCls);\n  const mergeCls = classNames(mergeRootCls, className, hashId);\n  const mergePopupCls = classNames(prefixCls, rtlCls);\n  const popupAllowCloseRef = useRef(true);\n  const handleChange = (data, type, pickColor) => {\n    let color = generateColor(data);\n    if (colorCleared) {\n      setColorCleared(false);\n      const hsba = color.toHsb();\n      // ignore alpha slider\n      if (colorValue.toHsb().a === 0 && type !== 'alpha') {\n        hsba.a = 1;\n        color = generateColor(hsba);\n      }\n    }\n    if (!value) {\n      setColorValue(color);\n    }\n    // Only for drag-and-drop color picking\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n  const handleClear = () => {\n    setColorCleared(true);\n    onClear === null || onClear === void 0 ? void 0 : onClear();\n  };\n  const handleChangeComplete = () => {\n    popupAllowCloseRef.current = true;\n  };\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow\n  };\n  const colorBaseProps = {\n    prefixCls,\n    color: colorValue,\n    allowClear,\n    colorCleared,\n    disabled,\n    presets,\n    format,\n    onFormatChange\n  };\n  return wrapSSR( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    onOpenChange: visible => {\n      if (popupAllowCloseRef.current) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    })),\n    overlayClassName: mergePopupCls\n  }, popoverProps), children || /*#__PURE__*/React.createElement(ColorTrigger, {\n    open: popupOpen,\n    className: mergeCls,\n    style: style,\n    color: colorValue,\n    prefixCls: prefixCls,\n    disabled: disabled,\n    colorCleared: colorCleared\n  })));\n};\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\nconst PurePanel = genPurePanel(ColorPicker, 'color-picker', /* istanbul ignore next */\nprefixCls => prefixCls, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}));\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;"]},"metadata":{},"sourceType":"module"}