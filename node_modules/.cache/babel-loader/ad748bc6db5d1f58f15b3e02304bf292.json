{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport usePatchElement from '../../_util/hooks/usePatchElement';\nimport { withConfirm, withError, withInfo, withSuccess, withWarn } from '../confirm';\nimport destroyFns from '../destroyFns';\nimport HookModal from './HookModal';\nlet uuid = 0;\nconst ElementsHolder =\n/*#__PURE__*/\nReact.memo(\n/*#__PURE__*/\nReact.forwardRef((_props, ref) => {\n  const _usePatchElement = usePatchElement(),\n        _usePatchElement2 = _slicedToArray(_usePatchElement, 2),\n        elements = _usePatchElement2[0],\n        patchElement = _usePatchElement2[1];\n\n  React.useImperativeHandle(ref, () => ({\n    patchElement\n  }), []); // eslint-disable-next-line react/jsx-no-useless-fragment\n\n  return (\n    /*#__PURE__*/\n    React.createElement(React.Fragment, null, elements)\n  );\n}));\n\nfunction useModal() {\n  const holderRef = React.useRef(null); // ========================== Effect ==========================\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        actionQueue = _React$useState2[0],\n        setActionQueue = _React$useState2[1];\n\n  React.useEffect(() => {\n    if (actionQueue.length) {\n      const cloneQueue = _toConsumableArray(actionQueue);\n\n      cloneQueue.forEach(action => {\n        action();\n      });\n      setActionQueue([]);\n    }\n  }, [actionQueue]); // =========================== Hook ===========================\n\n  const getConfirmFunc = React.useCallback(withFunc => function hookConfirm(config) {\n    var _a;\n\n    uuid += 1;\n    const modalRef =\n    /*#__PURE__*/\n    React.createRef();\n    let closeFunc;\n    const modal =\n    /*#__PURE__*/\n    React.createElement(HookModal, {\n      key: `modal-${uuid}`,\n      config: withFunc(config),\n      ref: modalRef,\n      afterClose: () => {\n        closeFunc === null || closeFunc === void 0 ? void 0 : closeFunc();\n      }\n    });\n    closeFunc = (_a = holderRef.current) === null || _a === void 0 ? void 0 : _a.patchElement(modal);\n\n    if (closeFunc) {\n      destroyFns.push(closeFunc);\n    }\n\n    return {\n      destroy: () => {\n        function destroyAction() {\n          var _a;\n\n          (_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n        }\n\n        if (modalRef.current) {\n          destroyAction();\n        } else {\n          setActionQueue(prev => [].concat(_toConsumableArray(prev), [destroyAction]));\n        }\n      },\n      update: newConfig => {\n        function updateAction() {\n          var _a;\n\n          (_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.update(newConfig);\n        }\n\n        if (modalRef.current) {\n          updateAction();\n        } else {\n          setActionQueue(prev => [].concat(_toConsumableArray(prev), [updateAction]));\n        }\n      }\n    };\n  }, []);\n  const fns = React.useMemo(() => ({\n    info: getConfirmFunc(withInfo),\n    success: getConfirmFunc(withSuccess),\n    error: getConfirmFunc(withError),\n    warning: getConfirmFunc(withWarn),\n    confirm: getConfirmFunc(withConfirm)\n  }), []);\n  return [fns,\n  /*#__PURE__*/\n  React.createElement(ElementsHolder, {\n    key: \"modal-holder\",\n    ref: holderRef\n  })];\n}\n\nexport default useModal;","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/modal/useModal/index.js"],"names":["_toConsumableArray","React","usePatchElement","withConfirm","withError","withInfo","withSuccess","withWarn","destroyFns","HookModal","uuid","ElementsHolder","memo","forwardRef","_props","ref","elements","patchElement","useImperativeHandle","createElement","Fragment","useModal","holderRef","useRef","useState","actionQueue","setActionQueue","useEffect","length","cloneQueue","forEach","action","getConfirmFunc","useCallback","withFunc","hookConfirm","config","_a","modalRef","createRef","closeFunc","modal","key","afterClose","current","push","destroy","destroyAction","prev","concat","update","newConfig","updateAction","fns","useMemo","info","success","error","warning","confirm"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport usePatchElement from '../../_util/hooks/usePatchElement';\nimport { withConfirm, withError, withInfo, withSuccess, withWarn } from '../confirm';\nimport destroyFns from '../destroyFns';\nimport HookModal from './HookModal';\nlet uuid = 0;\nconst ElementsHolder = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef((_props, ref) => {\n  const [elements, patchElement] = usePatchElement();\n  React.useImperativeHandle(ref, () => ({\n    patchElement\n  }), []);\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return /*#__PURE__*/React.createElement(React.Fragment, null, elements);\n}));\nfunction useModal() {\n  const holderRef = React.useRef(null);\n  // ========================== Effect ==========================\n  const [actionQueue, setActionQueue] = React.useState([]);\n  React.useEffect(() => {\n    if (actionQueue.length) {\n      const cloneQueue = _toConsumableArray(actionQueue);\n      cloneQueue.forEach(action => {\n        action();\n      });\n      setActionQueue([]);\n    }\n  }, [actionQueue]);\n  // =========================== Hook ===========================\n  const getConfirmFunc = React.useCallback(withFunc => function hookConfirm(config) {\n    var _a;\n    uuid += 1;\n    const modalRef = /*#__PURE__*/React.createRef();\n    let closeFunc;\n    const modal = /*#__PURE__*/React.createElement(HookModal, {\n      key: `modal-${uuid}`,\n      config: withFunc(config),\n      ref: modalRef,\n      afterClose: () => {\n        closeFunc === null || closeFunc === void 0 ? void 0 : closeFunc();\n      }\n    });\n    closeFunc = (_a = holderRef.current) === null || _a === void 0 ? void 0 : _a.patchElement(modal);\n    if (closeFunc) {\n      destroyFns.push(closeFunc);\n    }\n    return {\n      destroy: () => {\n        function destroyAction() {\n          var _a;\n          (_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n        }\n        if (modalRef.current) {\n          destroyAction();\n        } else {\n          setActionQueue(prev => [].concat(_toConsumableArray(prev), [destroyAction]));\n        }\n      },\n      update: newConfig => {\n        function updateAction() {\n          var _a;\n          (_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.update(newConfig);\n        }\n        if (modalRef.current) {\n          updateAction();\n        } else {\n          setActionQueue(prev => [].concat(_toConsumableArray(prev), [updateAction]));\n        }\n      }\n    };\n  }, []);\n  const fns = React.useMemo(() => ({\n    info: getConfirmFunc(withInfo),\n    success: getConfirmFunc(withSuccess),\n    error: getConfirmFunc(withError),\n    warning: getConfirmFunc(withWarn),\n    confirm: getConfirmFunc(withConfirm)\n  }), []);\n  return [fns, /*#__PURE__*/React.createElement(ElementsHolder, {\n    key: \"modal-holder\",\n    ref: holderRef\n  })];\n}\nexport default useModal;"]},"metadata":{},"sourceType":"module"}