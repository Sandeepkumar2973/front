{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport { Popup } from 'rc-tooltip';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport { parseColor } from './util'; // ant-tooltip css-dev-only-do-not-override-w2s56n ant-tooltip-placement-top  ant-tooltip-hidden\n\nexport default function PurePanel(props) {\n  const customizePrefixCls = props.prefixCls,\n        className = props.className,\n        _props$placement = props.placement,\n        placement = _props$placement === void 0 ? 'top' : _props$placement,\n        title = props.title,\n        color = props.color,\n        overlayInnerStyle = props.overlayInnerStyle;\n\n  const _React$useContext = React.useContext(ConfigContext),\n        getPrefixCls = _React$useContext.getPrefixCls;\n\n  const prefixCls = getPrefixCls('tooltip', customizePrefixCls);\n\n  const _useStyle = useStyle(prefixCls, true),\n        _useStyle2 = _slicedToArray(_useStyle, 2),\n        wrapSSR = _useStyle2[0],\n        hashId = _useStyle2[1]; // Color\n\n\n  const colorInfo = parseColor(prefixCls, color);\n  const formattedOverlayInnerStyle = Object.assign(Object.assign({}, overlayInnerStyle), colorInfo.overlayStyle);\n  const arrowContentStyle = colorInfo.arrowStyle;\n  return wrapSSR(\n  /*#__PURE__*/\n  React.createElement(\"div\", {\n    className: classNames(hashId, prefixCls, `${prefixCls}-pure`, `${prefixCls}-placement-${placement}`, className, colorInfo.className),\n    style: arrowContentStyle\n  },\n  /*#__PURE__*/\n  React.createElement(\"div\", {\n    className: `${prefixCls}-arrow`\n  }),\n  /*#__PURE__*/\n  React.createElement(Popup, Object.assign({}, props, {\n    className: hashId,\n    prefixCls: prefixCls,\n    overlayInnerStyle: formattedOverlayInnerStyle\n  }), title)));\n}","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/tooltip/PurePanel.js"],"names":["classNames","Popup","React","ConfigContext","useStyle","parseColor","PurePanel","props","customizePrefixCls","prefixCls","className","placement","title","color","overlayInnerStyle","useContext","getPrefixCls","wrapSSR","hashId","colorInfo","formattedOverlayInnerStyle","Object","assign","overlayStyle","arrowContentStyle","arrowStyle","createElement","style"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,SAASC,UAAT,QAA2B,QAA3B,C,CACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,QAE1BC,kBAF0B,GAQnCD,KARmC,CAErCE,SAFqC;AAAA,QAGrCC,SAHqC,GAQnCH,KARmC,CAGrCG,SAHqC;AAAA,2BAQnCH,KARmC,CAIrCI,SAJqC;AAAA,QAIrCA,SAJqC,iCAIzB,KAJyB;AAAA,QAKrCC,KALqC,GAQnCL,KARmC,CAKrCK,KALqC;AAAA,QAMrCC,KANqC,GAQnCN,KARmC,CAMrCM,KANqC;AAAA,QAOrCC,iBAPqC,GAQnCP,KARmC,CAOrCO,iBAPqC;;AAAA,4BAWnCZ,KAAK,CAACa,UAAN,CAAiBZ,aAAjB,CAXmC;AAAA,QAUrCa,YAVqC,qBAUrCA,YAVqC;;AAYvC,QAAMP,SAAS,GAAGO,YAAY,CAAC,SAAD,EAAYR,kBAAZ,CAA9B;;AAZuC,oBAabJ,QAAQ,CAACK,SAAD,EAAY,IAAZ,CAbK;AAAA;AAAA,QAahCQ,OAbgC;AAAA,QAavBC,MAbuB,kBAcvC;;;AACA,QAAMC,SAAS,GAAGd,UAAU,CAACI,SAAD,EAAYI,KAAZ,CAA5B;AACA,QAAMO,0BAA0B,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,iBAAlB,CAAd,EAAoDK,SAAS,CAACI,YAA9D,CAAnC;AACA,QAAMC,iBAAiB,GAAGL,SAAS,CAACM,UAApC;AACA,SAAOR,OAAO;AAAE;AAAaf,EAAAA,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AACtDhB,IAAAA,SAAS,EAAEV,UAAU,CAACkB,MAAD,EAAST,SAAT,EAAqB,GAAEA,SAAU,OAAjC,EAA0C,GAAEA,SAAU,cAAaE,SAAU,EAA7E,EAAgFD,SAAhF,EAA2FS,SAAS,CAACT,SAArG,CADiC;AAEtDiB,IAAAA,KAAK,EAAEH;AAF+C,GAA3B;AAG1B;AAAatB,EAAAA,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B;AACzChB,IAAAA,SAAS,EAAG,GAAED,SAAU;AADiB,GAA3B,CAHa;AAKzB;AAAaP,EAAAA,KAAK,CAACwB,aAAN,CAAoBzB,KAApB,EAA2BoB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,KAAlB,EAAyB;AACnEG,IAAAA,SAAS,EAAEQ,MADwD;AAEnET,IAAAA,SAAS,EAAEA,SAFwD;AAGnEK,IAAAA,iBAAiB,EAAEM;AAHgD,GAAzB,CAA3B,EAIbR,KAJa,CALY,CAAf,CAAd;AAUD","sourcesContent":["import classNames from 'classnames';\nimport { Popup } from 'rc-tooltip';\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport { parseColor } from './util';\n// ant-tooltip css-dev-only-do-not-override-w2s56n ant-tooltip-placement-top  ant-tooltip-hidden\nexport default function PurePanel(props) {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    placement = 'top',\n    title,\n    color,\n    overlayInnerStyle\n  } = props;\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('tooltip', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls, true);\n  // Color\n  const colorInfo = parseColor(prefixCls, color);\n  const formattedOverlayInnerStyle = Object.assign(Object.assign({}, overlayInnerStyle), colorInfo.overlayStyle);\n  const arrowContentStyle = colorInfo.arrowStyle;\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(hashId, prefixCls, `${prefixCls}-pure`, `${prefixCls}-placement-${placement}`, className, colorInfo.className),\n    style: arrowContentStyle\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-arrow`\n  }), /*#__PURE__*/React.createElement(Popup, Object.assign({}, props, {\n    className: hashId,\n    prefixCls: prefixCls,\n    overlayInnerStyle: formattedOverlayInnerStyle\n  }), title)));\n}"]},"metadata":{},"sourceType":"module"}