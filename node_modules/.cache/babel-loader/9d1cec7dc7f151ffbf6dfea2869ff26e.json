{"ast":null,"code":"import { Keyframes } from '@ant-design/cssinjs';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nconst skeletonClsLoading = new Keyframes(`ant-skeleton-loading`, {\n  '0%': {\n    backgroundPosition: '100% 50%'\n  },\n  '100%': {\n    backgroundPosition: '0 50%'\n  }\n});\n\nconst genSkeletonElementCommonSize = size => ({\n  height: size,\n  lineHeight: `${size}px`\n});\n\nconst genSkeletonElementAvatarSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\n\nconst genSkeletonColor = token => ({\n  background: token.skeletonLoadingBackground,\n  backgroundSize: '400% 100%',\n  animationName: skeletonClsLoading,\n  animationDuration: token.skeletonLoadingMotionDuration,\n  animationTimingFunction: 'ease',\n  animationIterationCount: 'infinite'\n});\n\nconst genSkeletonElementInputSize = size => Object.assign({\n  width: size * 5,\n  minWidth: size * 5\n}, genSkeletonElementCommonSize(size));\n\nconst genSkeletonElementAvatar = token => {\n  const skeletonAvatarCls = token.skeletonAvatarCls,\n        gradientFromColor = token.gradientFromColor,\n        controlHeight = token.controlHeight,\n        controlHeightLG = token.controlHeightLG,\n        controlHeightSM = token.controlHeightSM;\n  return {\n    [`${skeletonAvatarCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor\n    }, genSkeletonElementAvatarSize(controlHeight)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-circle`]: {\n      borderRadius: '50%'\n    },\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n  };\n};\n\nconst genSkeletonElementInput = token => {\n  const controlHeight = token.controlHeight,\n        borderRadiusSM = token.borderRadiusSM,\n        skeletonInputCls = token.skeletonInputCls,\n        controlHeightLG = token.controlHeightLG,\n        controlHeightSM = token.controlHeightSM,\n        gradientFromColor = token.gradientFromColor;\n  return {\n    [`${skeletonInputCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementInputSize(controlHeight)),\n    [`${skeletonInputCls}-lg`]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG)),\n    [`${skeletonInputCls}-sm`]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM))\n  };\n};\n\nconst genSkeletonElementImageSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\n\nconst genSkeletonElementImage = token => {\n  const skeletonImageCls = token.skeletonImageCls,\n        imageSizeBase = token.imageSizeBase,\n        gradientFromColor = token.gradientFromColor,\n        borderRadiusSM = token.borderRadiusSM;\n  return {\n    [`${skeletonImageCls}`]: Object.assign(Object.assign({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementImageSize(imageSizeBase * 2)), {\n      [`${skeletonImageCls}-path`]: {\n        fill: '#bfbfbf'\n      },\n      [`${skeletonImageCls}-svg`]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n        maxWidth: imageSizeBase * 4,\n        maxHeight: imageSizeBase * 4\n      }),\n      [`${skeletonImageCls}-svg${skeletonImageCls}-svg-circle`]: {\n        borderRadius: '50%'\n      }\n    }),\n    [`${skeletonImageCls}${skeletonImageCls}-circle`]: {\n      borderRadius: '50%'\n    }\n  };\n};\n\nconst genSkeletonElementButtonShape = (token, size, buttonCls) => {\n  const skeletonButtonCls = token.skeletonButtonCls;\n  return {\n    [`${buttonCls}${skeletonButtonCls}-circle`]: {\n      width: size,\n      minWidth: size,\n      borderRadius: '50%'\n    },\n    [`${buttonCls}${skeletonButtonCls}-round`]: {\n      borderRadius: size\n    }\n  };\n};\n\nconst genSkeletonElementButtonSize = size => Object.assign({\n  width: size * 2,\n  minWidth: size * 2\n}, genSkeletonElementCommonSize(size));\n\nconst genSkeletonElementButton = token => {\n  const borderRadiusSM = token.borderRadiusSM,\n        skeletonButtonCls = token.skeletonButtonCls,\n        controlHeight = token.controlHeight,\n        controlHeightLG = token.controlHeightLG,\n        controlHeightSM = token.controlHeightSM,\n        gradientFromColor = token.gradientFromColor;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    [`${skeletonButtonCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM,\n      width: controlHeight * 2,\n      minWidth: controlHeight * 2\n    }, genSkeletonElementButtonSize(controlHeight))\n  }, genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), {\n    [`${skeletonButtonCls}-lg`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG))\n  }), genSkeletonElementButtonShape(token, controlHeightLG, `${skeletonButtonCls}-lg`)), {\n    [`${skeletonButtonCls}-sm`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM))\n  }), genSkeletonElementButtonShape(token, controlHeightSM, `${skeletonButtonCls}-sm`));\n}; // =============================== Base ===============================\n\n\nconst genBaseStyle = token => {\n  const componentCls = token.componentCls,\n        skeletonAvatarCls = token.skeletonAvatarCls,\n        skeletonTitleCls = token.skeletonTitleCls,\n        skeletonParagraphCls = token.skeletonParagraphCls,\n        skeletonButtonCls = token.skeletonButtonCls,\n        skeletonInputCls = token.skeletonInputCls,\n        skeletonImageCls = token.skeletonImageCls,\n        controlHeight = token.controlHeight,\n        controlHeightLG = token.controlHeightLG,\n        controlHeightSM = token.controlHeightSM,\n        gradientFromColor = token.gradientFromColor,\n        padding = token.padding,\n        marginSM = token.marginSM,\n        borderRadius = token.borderRadius,\n        titleHeight = token.titleHeight,\n        blockRadius = token.blockRadius,\n        paragraphLiHeight = token.paragraphLiHeight,\n        controlHeightXS = token.controlHeightXS,\n        paragraphMarginTop = token.paragraphMarginTop;\n  return {\n    [`${componentCls}`]: {\n      display: 'table',\n      width: '100%',\n      [`${componentCls}-header`]: {\n        display: 'table-cell',\n        paddingInlineEnd: padding,\n        verticalAlign: 'top',\n        // Avatar\n        [`${skeletonAvatarCls}`]: Object.assign({\n          display: 'inline-block',\n          verticalAlign: 'top',\n          background: gradientFromColor\n        }, genSkeletonElementAvatarSize(controlHeight)),\n        [`${skeletonAvatarCls}-circle`]: {\n          borderRadius: '50%'\n        },\n        [`${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n        [`${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n      },\n      [`${componentCls}-content`]: {\n        display: 'table-cell',\n        width: '100%',\n        verticalAlign: 'top',\n        // Title\n        [`${skeletonTitleCls}`]: {\n          width: '100%',\n          height: titleHeight,\n          background: gradientFromColor,\n          borderRadius: blockRadius,\n          [`+ ${skeletonParagraphCls}`]: {\n            marginBlockStart: controlHeightSM\n          }\n        },\n        // paragraph\n        [`${skeletonParagraphCls}`]: {\n          padding: 0,\n          '> li': {\n            width: '100%',\n            height: paragraphLiHeight,\n            listStyle: 'none',\n            background: gradientFromColor,\n            borderRadius: blockRadius,\n            '+ li': {\n              marginBlockStart: controlHeightXS\n            }\n          }\n        },\n        [`${skeletonParagraphCls}> li:last-child:not(:first-child):not(:nth-child(2))`]: {\n          width: '61%'\n        }\n      },\n      [`&-round ${componentCls}-content`]: {\n        [`${skeletonTitleCls}, ${skeletonParagraphCls} > li`]: {\n          borderRadius\n        }\n      }\n    },\n    [`${componentCls}-with-avatar ${componentCls}-content`]: {\n      // Title\n      [`${skeletonTitleCls}`]: {\n        marginBlockStart: marginSM,\n        [`+ ${skeletonParagraphCls}`]: {\n          marginBlockStart: paragraphMarginTop\n        }\n      }\n    },\n    // Skeleton element\n    [`${componentCls}${componentCls}-element`]: Object.assign(Object.assign(Object.assign(Object.assign({\n      display: 'inline-block',\n      width: 'auto'\n    }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token)),\n    // Skeleton Block Button, Input\n    [`${componentCls}${componentCls}-block`]: {\n      width: '100%',\n      [`${skeletonButtonCls}`]: {\n        width: '100%'\n      },\n      [`${skeletonInputCls}`]: {\n        width: '100%'\n      }\n    },\n    // With active animation\n    [`${componentCls}${componentCls}-active`]: {\n      [`\n        ${skeletonTitleCls},\n        ${skeletonParagraphCls} > li,\n        ${skeletonAvatarCls},\n        ${skeletonButtonCls},\n        ${skeletonInputCls},\n        ${skeletonImageCls}\n      `]: Object.assign({}, genSkeletonColor(token))\n    }\n  };\n}; // ============================== Export ==============================\n\n\nexport default genComponentStyleHook('Skeleton', token => {\n  const componentCls = token.componentCls;\n  const skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: `${componentCls}-avatar`,\n    skeletonTitleCls: `${componentCls}-title`,\n    skeletonParagraphCls: `${componentCls}-paragraph`,\n    skeletonButtonCls: `${componentCls}-button`,\n    skeletonInputCls: `${componentCls}-input`,\n    skeletonImageCls: `${componentCls}-image`,\n    imageSizeBase: token.controlHeight * 1.5,\n    borderRadius: 100,\n    skeletonLoadingBackground: `linear-gradient(90deg, ${token.gradientFromColor} 25%, ${token.gradientToColor} 37%, ${token.gradientFromColor} 63%)`,\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, token => {\n  const colorFillContent = token.colorFillContent,\n        colorFill = token.colorFill;\n  const gradientFromColor = colorFillContent;\n  const gradientToColor = colorFill;\n  return {\n    color: gradientFromColor,\n    colorGradientEnd: gradientToColor,\n    gradientFromColor,\n    gradientToColor,\n    titleHeight: token.controlHeight / 2,\n    blockRadius: token.borderRadiusSM,\n    paragraphMarginTop: token.marginLG + token.marginXXS,\n    paragraphLiHeight: token.controlHeight / 2\n  };\n}, {\n  deprecatedTokens: [['color', 'gradientFromColor'], ['colorGradientEnd', 'gradientToColor']]\n});","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/skeleton/style/index.js"],"names":["Keyframes","genComponentStyleHook","mergeToken","skeletonClsLoading","backgroundPosition","genSkeletonElementCommonSize","size","height","lineHeight","genSkeletonElementAvatarSize","Object","assign","width","genSkeletonColor","token","background","skeletonLoadingBackground","backgroundSize","animationName","animationDuration","skeletonLoadingMotionDuration","animationTimingFunction","animationIterationCount","genSkeletonElementInputSize","minWidth","genSkeletonElementAvatar","skeletonAvatarCls","gradientFromColor","controlHeight","controlHeightLG","controlHeightSM","display","verticalAlign","borderRadius","genSkeletonElementInput","borderRadiusSM","skeletonInputCls","genSkeletonElementImageSize","genSkeletonElementImage","skeletonImageCls","imageSizeBase","alignItems","justifyContent","fill","maxWidth","maxHeight","genSkeletonElementButtonShape","buttonCls","skeletonButtonCls","genSkeletonElementButtonSize","genSkeletonElementButton","genBaseStyle","componentCls","skeletonTitleCls","skeletonParagraphCls","padding","marginSM","titleHeight","blockRadius","paragraphLiHeight","controlHeightXS","paragraphMarginTop","paddingInlineEnd","marginBlockStart","listStyle","skeletonToken","gradientToColor","colorFillContent","colorFill","color","colorGradientEnd","marginLG","marginXXS","deprecatedTokens"],"mappings":"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","sourcesContent":["import { Keyframes } from '@ant-design/cssinjs';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nconst skeletonClsLoading = new Keyframes(`ant-skeleton-loading`, {\n  '0%': {\n    backgroundPosition: '100% 50%'\n  },\n  '100%': {\n    backgroundPosition: '0 50%'\n  }\n});\nconst genSkeletonElementCommonSize = size => ({\n  height: size,\n  lineHeight: `${size}px`\n});\nconst genSkeletonElementAvatarSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonColor = token => ({\n  background: token.skeletonLoadingBackground,\n  backgroundSize: '400% 100%',\n  animationName: skeletonClsLoading,\n  animationDuration: token.skeletonLoadingMotionDuration,\n  animationTimingFunction: 'ease',\n  animationIterationCount: 'infinite'\n});\nconst genSkeletonElementInputSize = size => Object.assign({\n  width: size * 5,\n  minWidth: size * 5\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementAvatar = token => {\n  const {\n    skeletonAvatarCls,\n    gradientFromColor,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM\n  } = token;\n  return {\n    [`${skeletonAvatarCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor\n    }, genSkeletonElementAvatarSize(controlHeight)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-circle`]: {\n      borderRadius: '50%'\n    },\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n    [`${skeletonAvatarCls}${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementInput = token => {\n  const {\n    controlHeight,\n    borderRadiusSM,\n    skeletonInputCls,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor\n  } = token;\n  return {\n    [`${skeletonInputCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementInputSize(controlHeight)),\n    [`${skeletonInputCls}-lg`]: Object.assign({}, genSkeletonElementInputSize(controlHeightLG)),\n    [`${skeletonInputCls}-sm`]: Object.assign({}, genSkeletonElementInputSize(controlHeightSM))\n  };\n};\nconst genSkeletonElementImageSize = size => Object.assign({\n  width: size\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementImage = token => {\n  const {\n    skeletonImageCls,\n    imageSizeBase,\n    gradientFromColor,\n    borderRadiusSM\n  } = token;\n  return {\n    [`${skeletonImageCls}`]: Object.assign(Object.assign({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM\n    }, genSkeletonElementImageSize(imageSizeBase * 2)), {\n      [`${skeletonImageCls}-path`]: {\n        fill: '#bfbfbf'\n      },\n      [`${skeletonImageCls}-svg`]: Object.assign(Object.assign({}, genSkeletonElementImageSize(imageSizeBase)), {\n        maxWidth: imageSizeBase * 4,\n        maxHeight: imageSizeBase * 4\n      }),\n      [`${skeletonImageCls}-svg${skeletonImageCls}-svg-circle`]: {\n        borderRadius: '50%'\n      }\n    }),\n    [`${skeletonImageCls}${skeletonImageCls}-circle`]: {\n      borderRadius: '50%'\n    }\n  };\n};\nconst genSkeletonElementButtonShape = (token, size, buttonCls) => {\n  const {\n    skeletonButtonCls\n  } = token;\n  return {\n    [`${buttonCls}${skeletonButtonCls}-circle`]: {\n      width: size,\n      minWidth: size,\n      borderRadius: '50%'\n    },\n    [`${buttonCls}${skeletonButtonCls}-round`]: {\n      borderRadius: size\n    }\n  };\n};\nconst genSkeletonElementButtonSize = size => Object.assign({\n  width: size * 2,\n  minWidth: size * 2\n}, genSkeletonElementCommonSize(size));\nconst genSkeletonElementButton = token => {\n  const {\n    borderRadiusSM,\n    skeletonButtonCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor\n  } = token;\n  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n    [`${skeletonButtonCls}`]: Object.assign({\n      display: 'inline-block',\n      verticalAlign: 'top',\n      background: gradientFromColor,\n      borderRadius: borderRadiusSM,\n      width: controlHeight * 2,\n      minWidth: controlHeight * 2\n    }, genSkeletonElementButtonSize(controlHeight))\n  }, genSkeletonElementButtonShape(token, controlHeight, skeletonButtonCls)), {\n    [`${skeletonButtonCls}-lg`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightLG))\n  }), genSkeletonElementButtonShape(token, controlHeightLG, `${skeletonButtonCls}-lg`)), {\n    [`${skeletonButtonCls}-sm`]: Object.assign({}, genSkeletonElementButtonSize(controlHeightSM))\n  }), genSkeletonElementButtonShape(token, controlHeightSM, `${skeletonButtonCls}-sm`));\n};\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    skeletonAvatarCls,\n    skeletonTitleCls,\n    skeletonParagraphCls,\n    skeletonButtonCls,\n    skeletonInputCls,\n    skeletonImageCls,\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    gradientFromColor,\n    padding,\n    marginSM,\n    borderRadius,\n    titleHeight,\n    blockRadius,\n    paragraphLiHeight,\n    controlHeightXS,\n    paragraphMarginTop\n  } = token;\n  return {\n    [`${componentCls}`]: {\n      display: 'table',\n      width: '100%',\n      [`${componentCls}-header`]: {\n        display: 'table-cell',\n        paddingInlineEnd: padding,\n        verticalAlign: 'top',\n        // Avatar\n        [`${skeletonAvatarCls}`]: Object.assign({\n          display: 'inline-block',\n          verticalAlign: 'top',\n          background: gradientFromColor\n        }, genSkeletonElementAvatarSize(controlHeight)),\n        [`${skeletonAvatarCls}-circle`]: {\n          borderRadius: '50%'\n        },\n        [`${skeletonAvatarCls}-lg`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightLG)),\n        [`${skeletonAvatarCls}-sm`]: Object.assign({}, genSkeletonElementAvatarSize(controlHeightSM))\n      },\n      [`${componentCls}-content`]: {\n        display: 'table-cell',\n        width: '100%',\n        verticalAlign: 'top',\n        // Title\n        [`${skeletonTitleCls}`]: {\n          width: '100%',\n          height: titleHeight,\n          background: gradientFromColor,\n          borderRadius: blockRadius,\n          [`+ ${skeletonParagraphCls}`]: {\n            marginBlockStart: controlHeightSM\n          }\n        },\n        // paragraph\n        [`${skeletonParagraphCls}`]: {\n          padding: 0,\n          '> li': {\n            width: '100%',\n            height: paragraphLiHeight,\n            listStyle: 'none',\n            background: gradientFromColor,\n            borderRadius: blockRadius,\n            '+ li': {\n              marginBlockStart: controlHeightXS\n            }\n          }\n        },\n        [`${skeletonParagraphCls}> li:last-child:not(:first-child):not(:nth-child(2))`]: {\n          width: '61%'\n        }\n      },\n      [`&-round ${componentCls}-content`]: {\n        [`${skeletonTitleCls}, ${skeletonParagraphCls} > li`]: {\n          borderRadius\n        }\n      }\n    },\n    [`${componentCls}-with-avatar ${componentCls}-content`]: {\n      // Title\n      [`${skeletonTitleCls}`]: {\n        marginBlockStart: marginSM,\n        [`+ ${skeletonParagraphCls}`]: {\n          marginBlockStart: paragraphMarginTop\n        }\n      }\n    },\n    // Skeleton element\n    [`${componentCls}${componentCls}-element`]: Object.assign(Object.assign(Object.assign(Object.assign({\n      display: 'inline-block',\n      width: 'auto'\n    }, genSkeletonElementButton(token)), genSkeletonElementAvatar(token)), genSkeletonElementInput(token)), genSkeletonElementImage(token)),\n    // Skeleton Block Button, Input\n    [`${componentCls}${componentCls}-block`]: {\n      width: '100%',\n      [`${skeletonButtonCls}`]: {\n        width: '100%'\n      },\n      [`${skeletonInputCls}`]: {\n        width: '100%'\n      }\n    },\n    // With active animation\n    [`${componentCls}${componentCls}-active`]: {\n      [`\n        ${skeletonTitleCls},\n        ${skeletonParagraphCls} > li,\n        ${skeletonAvatarCls},\n        ${skeletonButtonCls},\n        ${skeletonInputCls},\n        ${skeletonImageCls}\n      `]: Object.assign({}, genSkeletonColor(token))\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Skeleton', token => {\n  const {\n    componentCls\n  } = token;\n  const skeletonToken = mergeToken(token, {\n    skeletonAvatarCls: `${componentCls}-avatar`,\n    skeletonTitleCls: `${componentCls}-title`,\n    skeletonParagraphCls: `${componentCls}-paragraph`,\n    skeletonButtonCls: `${componentCls}-button`,\n    skeletonInputCls: `${componentCls}-input`,\n    skeletonImageCls: `${componentCls}-image`,\n    imageSizeBase: token.controlHeight * 1.5,\n    borderRadius: 100,\n    skeletonLoadingBackground: `linear-gradient(90deg, ${token.gradientFromColor} 25%, ${token.gradientToColor} 37%, ${token.gradientFromColor} 63%)`,\n    skeletonLoadingMotionDuration: '1.4s'\n  });\n  return [genBaseStyle(skeletonToken)];\n}, token => {\n  const {\n    colorFillContent,\n    colorFill\n  } = token;\n  const gradientFromColor = colorFillContent;\n  const gradientToColor = colorFill;\n  return {\n    color: gradientFromColor,\n    colorGradientEnd: gradientToColor,\n    gradientFromColor,\n    gradientToColor,\n    titleHeight: token.controlHeight / 2,\n    blockRadius: token.borderRadiusSM,\n    paragraphMarginTop: token.marginLG + token.marginXXS,\n    paragraphLiHeight: token.controlHeight / 2\n  };\n}, {\n  deprecatedTokens: [['color', 'gradientFromColor'], ['colorGradientEnd', 'gradientToColor']]\n});"]},"metadata":{},"sourceType":"module"}