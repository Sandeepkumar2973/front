{"ast":null,"code":"import { getRoundNumber } from \"@rc-component/color-picker/es/util\";\nimport { ColorFactory } from './color';\nexport var customizePrefixCls = 'ant-color-picker';\nexport var generateColor = function generateColor(color) {\n  if (color instanceof ColorFactory) {\n    return color;\n  }\n\n  return new ColorFactory(color);\n};\nexport var getAlphaColor = function getAlphaColor(color) {\n  return getRoundNumber(color.toHsb().a * 100);\n};\nexport var toHexFormat = function toHexFormat(value, alpha) {\n  return (value === null || value === void 0 ? void 0 : value.replace(/[^\\w/]/gi, '').slice(0, alpha ? 8 : 6)) || '';\n};\nexport var getHex = function getHex(value, alpha) {\n  return value ? toHexFormat(value, alpha) : '';\n};","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/color-picker/util.js"],"names":["getRoundNumber","ColorFactory","customizePrefixCls","generateColor","color","getAlphaColor","toHsb","a","toHexFormat","value","alpha","replace","slice","getHex"],"mappings":"AAAA,SAASA,cAAT,QAA+B,oCAA/B;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,OAAO,IAAMC,kBAAkB,GAAG,kBAA3B;AACP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AACpC,MAAIA,KAAK,YAAYH,YAArB,EAAmC;AACjC,WAAOG,KAAP;AACD;;AACD,SAAO,IAAIH,YAAJ,CAAiBG,KAAjB,CAAP;AACD,CALM;AAMP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAD,KAAK;AAAA,SAAIJ,cAAc,CAACI,KAAK,CAACE,KAAN,GAAcC,CAAd,GAAkB,GAAnB,CAAlB;AAAA,CAA3B;AACP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,KAAR;AAAA,SAAkB,CAACD,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACE,OAAN,CAAc,UAAd,EAA0B,EAA1B,EAA8BC,KAA9B,CAAoC,CAApC,EAAuCF,KAAK,GAAG,CAAH,GAAO,CAAnD,CAA/C,KAAyG,EAA3H;AAAA,CAApB;AACP,OAAO,IAAMG,MAAM,GAAG,SAATA,MAAS,CAACJ,KAAD,EAAQC,KAAR;AAAA,SAAkBD,KAAK,GAAGD,WAAW,CAACC,KAAD,EAAQC,KAAR,CAAd,GAA+B,EAAtD;AAAA,CAAf","sourcesContent":["import { getRoundNumber } from \"@rc-component/color-picker/es/util\";\nimport { ColorFactory } from './color';\nexport const customizePrefixCls = 'ant-color-picker';\nexport const generateColor = color => {\n  if (color instanceof ColorFactory) {\n    return color;\n  }\n  return new ColorFactory(color);\n};\nexport const getAlphaColor = color => getRoundNumber(color.toHsb().a * 100);\nexport const toHexFormat = (value, alpha) => (value === null || value === void 0 ? void 0 : value.replace(/[^\\w/]/gi, '').slice(0, alpha ? 8 : 6)) || '';\nexport const getHex = (value, alpha) => value ? toHexFormat(value, alpha) : '';"]},"metadata":{},"sourceType":"module"}