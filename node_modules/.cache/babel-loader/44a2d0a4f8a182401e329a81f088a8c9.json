{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { generateColor, getAlphaColor } from '../util';\nimport ColorSteppers from './ColorSteppers';\n\nvar ColorAlphaInput = function ColorAlphaInput(_ref) {\n  var prefixCls = _ref.prefixCls,\n      value = _ref.value,\n      onChange = _ref.onChange;\n  var colorAlphaInputPrefixCls = \"\".concat(prefixCls, \"-alpha-input\");\n\n  var _useState = useState(generateColor(value || '#000')),\n      _useState2 = _slicedToArray(_useState, 2),\n      alphaValue = _useState2[0],\n      setAlphaValue = _useState2[1]; // Update step value\n\n\n  useEffect(function () {\n    if (value) {\n      setAlphaValue(value);\n    }\n  }, [value]);\n\n  var handleAlphaChange = function handleAlphaChange(step) {\n    var hsba = alphaValue.toHsb();\n    hsba.a = (step || 0) / 100;\n    var genColor = generateColor(hsba);\n\n    if (!value) {\n      setAlphaValue(genColor);\n    }\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\n  };\n\n  return (\n    /*#__PURE__*/\n    React.createElement(ColorSteppers, {\n      value: getAlphaColor(alphaValue),\n      prefixCls: prefixCls,\n      formatter: function formatter(step) {\n        return \"\".concat(step, \"%\");\n      },\n      className: colorAlphaInputPrefixCls,\n      onChange: handleAlphaChange\n    })\n  );\n};\n\nexport default ColorAlphaInput;","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/color-picker/components/ColorAlphaInput.js"],"names":["React","useEffect","useState","generateColor","getAlphaColor","ColorSteppers","ColorAlphaInput","_ref","prefixCls","value","onChange","colorAlphaInputPrefixCls","alphaValue","setAlphaValue","handleAlphaChange","step","hsba","toHsb","a","genColor","createElement","formatter","className"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,SAA7C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,IAAI,EAAI;AAAA,MAE5BC,SAF4B,GAK1BD,IAL0B,CAE5BC,SAF4B;AAAA,MAG5BC,KAH4B,GAK1BF,IAL0B,CAG5BE,KAH4B;AAAA,MAI5BC,QAJ4B,GAK1BH,IAL0B,CAI5BG,QAJ4B;AAM9B,MAAMC,wBAAwB,aAAMH,SAAN,iBAA9B;;AAN8B,kBAOMN,QAAQ,CAACC,aAAa,CAACM,KAAK,IAAI,MAAV,CAAd,CAPd;AAAA;AAAA,MAOvBG,UAPuB;AAAA,MAOXC,aAPW,kBAQ9B;;;AACAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIQ,KAAJ,EAAW;AACTI,MAAAA,aAAa,CAACJ,KAAD,CAAb;AACD;AACF,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT;;AAKA,MAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,IAAI,EAAI;AAChC,QAAMC,IAAI,GAAGJ,UAAU,CAACK,KAAX,EAAb;AACAD,IAAAA,IAAI,CAACE,CAAL,GAAS,CAACH,IAAI,IAAI,CAAT,IAAc,GAAvB;AACA,QAAMI,QAAQ,GAAGhB,aAAa,CAACa,IAAD,CAA9B;;AACA,QAAI,CAACP,KAAL,EAAY;AACVI,MAAAA,aAAa,CAACM,QAAD,CAAb;AACD;;AACDT,IAAAA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACS,QAAD,CAA5D;AACD,GARD;;AASA;AAAO;AAAanB,IAAAA,KAAK,CAACoB,aAAN,CAAoBf,aAApB,EAAmC;AACrDI,MAAAA,KAAK,EAAEL,aAAa,CAACQ,UAAD,CADiC;AAErDJ,MAAAA,SAAS,EAAEA,SAF0C;AAGrDa,MAAAA,SAAS,EAAE,mBAAAN,IAAI;AAAA,yBAAOA,IAAP;AAAA,OAHsC;AAIrDO,MAAAA,SAAS,EAAEX,wBAJ0C;AAKrDD,MAAAA,QAAQ,EAAEI;AAL2C,KAAnC;AAApB;AAOD,CA9BD;;AA+BA,eAAeR,eAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { generateColor, getAlphaColor } from '../util';\nimport ColorSteppers from './ColorSteppers';\nconst ColorAlphaInput = _ref => {\n  let {\n    prefixCls,\n    value,\n    onChange\n  } = _ref;\n  const colorAlphaInputPrefixCls = `${prefixCls}-alpha-input`;\n  const [alphaValue, setAlphaValue] = useState(generateColor(value || '#000'));\n  // Update step value\n  useEffect(() => {\n    if (value) {\n      setAlphaValue(value);\n    }\n  }, [value]);\n  const handleAlphaChange = step => {\n    const hsba = alphaValue.toHsb();\n    hsba.a = (step || 0) / 100;\n    const genColor = generateColor(hsba);\n    if (!value) {\n      setAlphaValue(genColor);\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\n  };\n  return /*#__PURE__*/React.createElement(ColorSteppers, {\n    value: getAlphaColor(alphaValue),\n    prefixCls: prefixCls,\n    formatter: step => `${step}%`,\n    className: colorAlphaInputPrefixCls,\n    onChange: handleAlphaChange\n  });\n};\nexport default ColorAlphaInput;"]},"metadata":{},"sourceType":"module"}