{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { render } from \"rc-util/es/React/render\";\nimport * as React from 'react';\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\n\nlet act = callback => callback();\n\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\n\nfunction getGlobalContext() {\n  const _defaultGlobalConfig = defaultGlobalConfig,\n        globalPrefixCls = _defaultGlobalConfig.prefixCls,\n        globalGetContainer = _defaultGlobalConfig.getContainer,\n        rtl = _defaultGlobalConfig.rtl,\n        maxCount = _defaultGlobalConfig.maxCount,\n        top = _defaultGlobalConfig.top,\n        bottom = _defaultGlobalConfig.bottom;\n  const mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  const mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    container: mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\n\nconst GlobalHolder =\n/*#__PURE__*/\nReact.forwardRef((_, ref) => {\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        prefixCls = _React$useState2[0],\n        setPrefixCls = _React$useState2[1];\n\n  const _React$useState3 = React.useState(),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        container = _React$useState4[0],\n        setContainer = _React$useState4[1];\n\n  const _React$useState5 = React.useState(),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        maxCount = _React$useState6[0],\n        setMaxCount = _React$useState6[1];\n\n  const _React$useState7 = React.useState(),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        rtl = _React$useState8[0],\n        setRTL = _React$useState8[1];\n\n  const _React$useState9 = React.useState(),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        top = _React$useState10[0],\n        setTop = _React$useState10[1];\n\n  const _React$useState11 = React.useState(),\n        _React$useState12 = _slicedToArray(_React$useState11, 2),\n        bottom = _React$useState12[0],\n        setBottom = _React$useState12[1];\n\n  const _useInternalNotificat = useInternalNotification({\n    prefixCls,\n    getContainer: () => container,\n    maxCount,\n    rtl,\n    top,\n    bottom\n  }),\n        _useInternalNotificat2 = _slicedToArray(_useInternalNotificat, 2),\n        api = _useInternalNotificat2[0],\n        holder = _useInternalNotificat2[1];\n\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n\n  const sync = () => {\n    const _getGlobalContext = getGlobalContext(),\n          nextGlobalPrefixCls = _getGlobalContext.prefixCls,\n          nextGlobalContainer = _getGlobalContext.container,\n          nextGlobalMaxCount = _getGlobalContext.maxCount,\n          nextGlobalRTL = _getGlobalContext.rtl,\n          nextTop = _getGlobalContext.top,\n          nextBottom = _getGlobalContext.bottom;\n\n    setPrefixCls(nextGlobalPrefixCls);\n    setContainer(nextGlobalContainer);\n    setMaxCount(nextGlobalMaxCount);\n    setRTL(nextGlobalRTL);\n    setTop(nextTop);\n    setBottom(nextBottom);\n  };\n\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return (\n    /*#__PURE__*/\n    React.createElement(ConfigProvider, {\n      prefixCls: rootPrefixCls,\n      iconPrefixCls: rootIconPrefixCls,\n      theme: theme\n    }, holder)\n  );\n});\n\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification; // Delay render to avoid sync issue\n\n    act(() => {\n      render(\n      /*#__PURE__*/\n      React.createElement(GlobalHolder, {\n        ref: node => {\n          const _ref = node || {},\n                instance = _ref.instance,\n                sync = _ref.sync;\n\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  } // Notification not ready\n\n\n  if (!notification.instance) {\n    return;\n  } // >>> Execute task\n\n\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  }); // Clean up\n\n  taskQueue = [];\n} // ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\n\n\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config); // Trigger sync for it\n\n  act(() => {\n    var _a;\n\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\n\nfunction open(config) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('notification');\n  }\n\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\n\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\n\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n}); // ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\n\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport let actWrapper = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n\nexport default staticMethods;","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/notification/index.js"],"names":["render","React","ConfigProvider","globalConfig","warnContext","PurePanel","useNotification","useInternalNotification","notification","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","globalPrefixCls","prefixCls","globalGetContainer","getContainer","rtl","maxCount","top","bottom","mergedPrefixCls","getPrefixCls","mergedContainer","document","body","container","GlobalHolder","forwardRef","_","ref","useState","setPrefixCls","setContainer","setMaxCount","setRTL","setTop","setBottom","api","holder","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","theme","getTheme","sync","nextGlobalPrefixCls","nextGlobalContainer","nextGlobalMaxCount","nextGlobalRTL","nextTop","nextBottom","useEffect","useImperativeHandle","instance","Object","assign","keys","forEach","method","apply","arguments","createElement","iconPrefixCls","flushNotice","holderFragment","createDocumentFragment","newNotification","fragment","node","Promise","resolve","then","task","type","open","config","destroy","key","setNotificationGlobalConfig","_a","call","process","env","NODE_ENV","push","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","noop","actWrapper","wrapper"],"mappings":"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","sourcesContent":["import { render } from \"rc-util/es/React/render\";\nimport * as React from 'react';\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    prefixCls: globalPrefixCls,\n    getContainer: globalGetContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  const mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    container: mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [prefixCls, setPrefixCls] = React.useState();\n  const [container, setContainer] = React.useState();\n  const [maxCount, setMaxCount] = React.useState();\n  const [rtl, setRTL] = React.useState();\n  const [top, setTop] = React.useState();\n  const [bottom, setBottom] = React.useState();\n  const [api, holder] = useInternalNotification({\n    prefixCls,\n    getContainer: () => container,\n    maxCount,\n    rtl,\n    top,\n    bottom\n  });\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const sync = () => {\n    const {\n      prefixCls: nextGlobalPrefixCls,\n      container: nextGlobalContainer,\n      maxCount: nextGlobalMaxCount,\n      rtl: nextGlobalRTL,\n      top: nextTop,\n      bottom: nextBottom\n    } = getGlobalContext();\n    setPrefixCls(nextGlobalPrefixCls);\n    setContainer(nextGlobalContainer);\n    setMaxCount(nextGlobalMaxCount);\n    setRTL(nextGlobalRTL);\n    setTop(nextTop);\n    setBottom(nextBottom);\n  };\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, holder);\n});\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('notification');\n  }\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\nexport default staticMethods;"]},"metadata":{},"sourceType":"module"}