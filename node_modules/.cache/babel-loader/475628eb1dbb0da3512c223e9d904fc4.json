{"ast":null,"code":"import { getRoundNumber } from \"@rc-component/color-picker/es/util\";\nimport { ColorFactory } from './color';\nexport const customizePrefixCls = 'ant-color-picker';\nexport const generateColor = color => {\n  if (color instanceof ColorFactory) {\n    return color;\n  }\n\n  return new ColorFactory(color);\n};\nexport const getAlphaColor = color => getRoundNumber(color.toHsb().a * 100);\nexport const toHexFormat = (value, alpha) => (value === null || value === void 0 ? void 0 : value.replace(/[^\\w/]/gi, '').slice(0, alpha ? 8 : 6)) || '';\nexport const getHex = (value, alpha) => value ? toHexFormat(value, alpha) : '';","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/color-picker/util.js"],"names":["getRoundNumber","ColorFactory","customizePrefixCls","generateColor","color","getAlphaColor","toHsb","a","toHexFormat","value","alpha","replace","slice","getHex"],"mappings":"AAAA,SAASA,cAAT,QAA+B,oCAA/B;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,OAAO,MAAMC,kBAAkB,GAAG,kBAA3B;AACP,OAAO,MAAMC,aAAa,GAAGC,KAAK,IAAI;AACpC,MAAIA,KAAK,YAAYH,YAArB,EAAmC;AACjC,WAAOG,KAAP;AACD;;AACD,SAAO,IAAIH,YAAJ,CAAiBG,KAAjB,CAAP;AACD,CALM;AAMP,OAAO,MAAMC,aAAa,GAAGD,KAAK,IAAIJ,cAAc,CAACI,KAAK,CAACE,KAAN,GAAcC,CAAd,GAAkB,GAAnB,CAA7C;AACP,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB,CAACD,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACE,OAAN,CAAc,UAAd,EAA0B,EAA1B,EAA8BC,KAA9B,CAAoC,CAApC,EAAuCF,KAAK,GAAG,CAAH,GAAO,CAAnD,CAA/C,KAAyG,EAA/I;AACP,OAAO,MAAMG,MAAM,GAAG,CAACJ,KAAD,EAAQC,KAAR,KAAkBD,KAAK,GAAGD,WAAW,CAACC,KAAD,EAAQC,KAAR,CAAd,GAA+B,EAArE","sourcesContent":["import { getRoundNumber } from \"@rc-component/color-picker/es/util\";\nimport { ColorFactory } from './color';\nexport const customizePrefixCls = 'ant-color-picker';\nexport const generateColor = color => {\n  if (color instanceof ColorFactory) {\n    return color;\n  }\n  return new ColorFactory(color);\n};\nexport const getAlphaColor = color => getRoundNumber(color.toHsb().a * 100);\nexport const toHexFormat = (value, alpha) => (value === null || value === void 0 ? void 0 : value.replace(/[^\\w/]/gi, '').slice(0, alpha ? 8 : 6)) || '';\nexport const getHex = (value, alpha) => value ? toHexFormat(value, alpha) : '';"]},"metadata":{},"sourceType":"module"}