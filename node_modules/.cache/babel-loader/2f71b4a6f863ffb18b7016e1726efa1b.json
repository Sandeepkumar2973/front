{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport * as React from 'react';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getSize, getStrokeColor } from './utils';\nvar CIRCLE_MIN_STROKE_WIDTH = 3;\n\nvar getMinPercent = function getMinPercent(width) {\n  return CIRCLE_MIN_STROKE_WIDTH / width * 100;\n};\n\nvar Circle = function Circle(props) {\n  var prefixCls = props.prefixCls,\n      _props$trailColor = props.trailColor,\n      trailColor = _props$trailColor === void 0 ? null : _props$trailColor,\n      _props$strokeLinecap = props.strokeLinecap,\n      strokeLinecap = _props$strokeLinecap === void 0 ? 'round' : _props$strokeLinecap,\n      gapPosition = props.gapPosition,\n      gapDegree = props.gapDegree,\n      _props$width = props.width,\n      originWidth = _props$width === void 0 ? 120 : _props$width,\n      type = props.type,\n      children = props.children,\n      success = props.success,\n      _props$size = props.size,\n      size = _props$size === void 0 ? originWidth : _props$size;\n\n  var _getSize = getSize(size, 'circle'),\n      _getSize2 = _slicedToArray(_getSize, 2),\n      width = _getSize2[0],\n      height = _getSize2[1];\n\n  var strokeWidth = props.strokeWidth;\n\n  if (strokeWidth === undefined) {\n    strokeWidth = Math.max(getMinPercent(width), 6);\n  }\n\n  var circleStyle = {\n    width: width,\n    height: height,\n    fontSize: width * 0.15 + 6\n  };\n  var realGapDegree = React.useMemo(function () {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n\n    if (type === 'dashboard') {\n      return 75;\n    }\n\n    return undefined;\n  }, [gapDegree, type]);\n  var gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined; // using className to style stroke color\n\n  var isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  var strokeColor = getStrokeColor({\n    success: success,\n    strokeColor: props.strokeColor\n  });\n  var wrapperClassName = classNames(\"\".concat(prefixCls, \"-inner\"), _defineProperty({}, \"\".concat(prefixCls, \"-circle-gradient\"), isGradient));\n  var circleContent =\n  /*#__PURE__*/\n  React.createElement(RCCircle, {\n    percent: getPercentage(props),\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    strokeColor: strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: realGapDegree,\n    gapPosition: gapPos\n  });\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: wrapperClassName,\n      style: circleStyle\n    }, width <= 20 ?\n    /*#__PURE__*/\n    React.createElement(Tooltip, {\n      title: children\n    },\n    /*#__PURE__*/\n    React.createElement(\"span\", null, circleContent)) :\n    /*#__PURE__*/\n    React.createElement(React.Fragment, null, circleContent, children))\n  );\n};\n\nexport default Circle;","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/progress/Circle.js"],"names":["classNames","Circle","RCCircle","React","Tooltip","getPercentage","getSize","getStrokeColor","CIRCLE_MIN_STROKE_WIDTH","getMinPercent","width","props","prefixCls","trailColor","strokeLinecap","gapPosition","gapDegree","originWidth","type","children","success","size","height","strokeWidth","undefined","Math","max","circleStyle","fontSize","realGapDegree","useMemo","gapPos","isGradient","Object","prototype","toString","call","strokeColor","wrapperClassName","circleContent","createElement","percent","trailWidth","className","style","title","Fragment"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport * as React from 'react';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getSize, getStrokeColor } from './utils';\nconst CIRCLE_MIN_STROKE_WIDTH = 3;\nconst getMinPercent = width => CIRCLE_MIN_STROKE_WIDTH / width * 100;\nconst Circle = props => {\n  const {\n    prefixCls,\n    trailColor = null,\n    strokeLinecap = 'round',\n    gapPosition,\n    gapDegree,\n    width: originWidth = 120,\n    type,\n    children,\n    success,\n    size = originWidth\n  } = props;\n  const [width, height] = getSize(size, 'circle');\n  let {\n    strokeWidth\n  } = props;\n  if (strokeWidth === undefined) {\n    strokeWidth = Math.max(getMinPercent(width), 6);\n  }\n  const circleStyle = {\n    width,\n    height,\n    fontSize: width * 0.15 + 6\n  };\n  const realGapDegree = React.useMemo(() => {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n    if (type === 'dashboard') {\n      return 75;\n    }\n    return undefined;\n  }, [gapDegree, type]);\n  const gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined;\n  // using className to style stroke color\n  const isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  const strokeColor = getStrokeColor({\n    success,\n    strokeColor: props.strokeColor\n  });\n  const wrapperClassName = classNames(`${prefixCls}-inner`, {\n    [`${prefixCls}-circle-gradient`]: isGradient\n  });\n  const circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    percent: getPercentage(props),\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    strokeColor: strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: realGapDegree,\n    gapPosition: gapPos\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, width <= 20 ? /*#__PURE__*/React.createElement(Tooltip, {\n    title: children\n  }, /*#__PURE__*/React.createElement(\"span\", null, circleContent)) : /*#__PURE__*/React.createElement(React.Fragment, null, circleContent, children));\n};\nexport default Circle;"]},"metadata":{},"sourceType":"module"}