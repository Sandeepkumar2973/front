{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ADMIN\\\\Downloads\\\\New folder\\\\portfolio\\\\react-portfolio-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport InputNumber from '../../input-number';\n\nvar ColorSteppers = function ColorSteppers(_ref) {\n  var prefixCls = _ref.prefixCls,\n      _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      value = _ref.value,\n      _onChange = _ref.onChange,\n      className = _ref.className,\n      formatter = _ref.formatter;\n  var colorSteppersPrefixCls = \"\".concat(prefixCls, \"-steppers\");\n\n  var _useState = useState(value),\n      _useState2 = _slicedToArray(_useState, 2),\n      stepValue = _useState2[0],\n      setStepValue = _useState2[1]; // Update step value\n\n\n  useEffect(function () {\n    if (!Number.isNaN(value)) {\n      setStepValue(value);\n    }\n  }, [value]);\n  return (\n    /*#__PURE__*/\n    React.createElement(InputNumber, {\n      className: classNames(colorSteppersPrefixCls, className),\n      min: min,\n      max: max,\n      value: stepValue,\n      formatter: formatter,\n      size: \"small\",\n      onChange: function onChange(step) {\n        if (!value) {\n          setStepValue(step || 0);\n        }\n\n        _onChange === null || _onChange === void 0 ? void 0 : _onChange(step);\n      }\n    })\n  );\n};\n\nexport default ColorSteppers;","map":{"version":3,"sources":["C:/Users/ADMIN/Downloads/New folder/portfolio/react-portfolio-master/node_modules/antd/es/color-picker/components/ColorSteppers.js"],"names":["classNames","React","useEffect","useState","InputNumber","ColorSteppers","_ref","prefixCls","min","max","value","onChange","className","formatter","colorSteppersPrefixCls","stepValue","setStepValue","Number","isNaN","createElement","size","step"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,oBAAxB;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI,EAAI;AAAA,MAE1BC,SAF0B,GASxBD,IATwB,CAE1BC,SAF0B;AAAA,iBASxBD,IATwB,CAG1BE,GAH0B;AAAA,MAG1BA,GAH0B,yBAGpB,CAHoB;AAAA,iBASxBF,IATwB,CAI1BG,GAJ0B;AAAA,MAI1BA,GAJ0B,yBAIpB,GAJoB;AAAA,MAK1BC,KAL0B,GASxBJ,IATwB,CAK1BI,KAL0B;AAAA,MAM1BC,SAN0B,GASxBL,IATwB,CAM1BK,QAN0B;AAAA,MAO1BC,SAP0B,GASxBN,IATwB,CAO1BM,SAP0B;AAAA,MAQ1BC,SAR0B,GASxBP,IATwB,CAQ1BO,SAR0B;AAU5B,MAAMC,sBAAsB,aAAMP,SAAN,cAA5B;;AAV4B,kBAWMJ,QAAQ,CAACO,KAAD,CAXd;AAAA;AAAA,MAWrBK,SAXqB;AAAA,MAWVC,YAXU,kBAY5B;;;AACAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACe,MAAM,CAACC,KAAP,CAAaR,KAAb,CAAL,EAA0B;AACxBM,MAAAA,YAAY,CAACN,KAAD,CAAZ;AACD;AACF,GAJQ,EAIN,CAACA,KAAD,CAJM,CAAT;AAKA;AAAO;AAAaT,IAAAA,KAAK,CAACkB,aAAN,CAAoBf,WAApB,EAAiC;AACnDQ,MAAAA,SAAS,EAAEZ,UAAU,CAACc,sBAAD,EAAyBF,SAAzB,CAD8B;AAEnDJ,MAAAA,GAAG,EAAEA,GAF8C;AAGnDC,MAAAA,GAAG,EAAEA,GAH8C;AAInDC,MAAAA,KAAK,EAAEK,SAJ4C;AAKnDF,MAAAA,SAAS,EAAEA,SALwC;AAMnDO,MAAAA,IAAI,EAAE,OAN6C;AAOnDT,MAAAA,QAAQ,EAAE,kBAAAU,IAAI,EAAI;AAChB,YAAI,CAACX,KAAL,EAAY;AACVM,UAAAA,YAAY,CAACK,IAAI,IAAI,CAAT,CAAZ;AACD;;AACDV,QAAAA,SAAQ,KAAK,IAAb,IAAqBA,SAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,SAAQ,CAACU,IAAD,CAA5D;AACD;AAZkD,KAAjC;AAApB;AAcD,CAhCD;;AAiCA,eAAehB,aAAf","sourcesContent":["import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport InputNumber from '../../input-number';\nconst ColorSteppers = _ref => {\n  let {\n    prefixCls,\n    min = 0,\n    max = 100,\n    value,\n    onChange,\n    className,\n    formatter\n  } = _ref;\n  const colorSteppersPrefixCls = `${prefixCls}-steppers`;\n  const [stepValue, setStepValue] = useState(value);\n  // Update step value\n  useEffect(() => {\n    if (!Number.isNaN(value)) {\n      setStepValue(value);\n    }\n  }, [value]);\n  return /*#__PURE__*/React.createElement(InputNumber, {\n    className: classNames(colorSteppersPrefixCls, className),\n    min: min,\n    max: max,\n    value: stepValue,\n    formatter: formatter,\n    size: \"small\",\n    onChange: step => {\n      if (!value) {\n        setStepValue(step || 0);\n      }\n      onChange === null || onChange === void 0 ? void 0 : onChange(step);\n    }\n  });\n};\nexport default ColorSteppers;"]},"metadata":{},"sourceType":"module"}